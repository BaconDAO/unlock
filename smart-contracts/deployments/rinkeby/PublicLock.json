{
  "address": "0x64A3328Cf61025720c26dE2a87B6d913fA6e376a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sendTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "name": "CancelKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Disable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_timeAdded",
          "type": "bool"
        }
      ],
      "name": "ExpirationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ExpireKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KeyGranterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KeyGranterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "KeyManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "LockManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "LockManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NewLockSymbol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keyManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextAvailableNonce",
          "type": "uint256"
        }
      ],
      "name": "NonceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldKeyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "PricingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeTrialLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundPenaltyBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "RefundPenaltyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiration",
          "type": "uint256"
        }
      ],
      "name": "RenewKeyPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "TransferFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addKeyGranter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addLockManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelAndRefund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyManager",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelAndRefundFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "disableLock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "expirationDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "expireAndRefundFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "freeTrialLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_txSender",
          "type": "address"
        }
      ],
      "name": "getCancelAndRefundApprovalHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "approvalHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        }
      ],
      "name": "getCancelAndRefundValueFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        }
      ],
      "name": "getHasValidKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pageSize",
          "type": "uint256"
        }
      ],
      "name": "getOwnersByPage",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTokenIdFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "getTransferFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_expirationTimestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_keyManagers",
          "type": "address[]"
        }
      ],
      "name": "grantKeys",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockCreator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_keyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxNumberOfKeys",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_lockName",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextAvailableNonce",
          "type": "uint256"
        }
      ],
      "name": "invalidateOffchainApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isKeyGranter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        }
      ],
      "name": "isKeyOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLockManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        }
      ],
      "name": "keyExpirationTimestampFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keyManagerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keyManagerToNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "keyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxNumberOfKeys",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberOfOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "onKeyCancelHook",
      "outputs": [
        {
          "internalType": "contract ILockKeyCancelHook",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "onKeyPurchaseHook",
      "outputs": [
        {
          "internalType": "contract ILockKeyPurchaseHook",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "publicLockVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "purchasePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "refundPenaltyBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceLockManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_granter",
          "type": "address"
        }
      ],
      "name": "revokeKeyGranter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_onKeyPurchaseHook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_onKeyCancelHook",
          "type": "address"
        }
      ],
      "name": "setEventHooks",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_keyManager",
          "type": "address"
        }
      ],
      "name": "setKeyManagerOf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeShared",
          "type": "uint256"
        }
      ],
      "name": "shareKey",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_keyOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transferFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "unlockProtocol",
      "outputs": [
        {
          "internalType": "contract IUnlock",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "updateBeneficiary",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_keyPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "updateKeyPricing",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_lockName",
          "type": "string"
        }
      ],
      "name": "updateLockName",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_lockSymbol",
          "type": "string"
        }
      ],
      "name": "updateLockSymbol",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_freeTrialLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundPenaltyBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "updateRefundPenalty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferFeeBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "updateTransferFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e3f465952e8fb9eea7244ba4efcdde76af5d50bc4a6951c77e6ac7867231428",
  "receipt": {
    "to": null,
    "from": "0x246A13358Fb27523642D86367a51C2aEB137Ac6C",
    "contractAddress": "0x64A3328Cf61025720c26dE2a87B6d913fA6e376a",
    "transactionIndex": 12,
    "gasUsed": "5104000",
    "logsBloom": "0x
    "blockHash": "0xf1f7893396696c31eb386fd39b89787ec217b697904034aa57413b4b8dd8c115",
    "transactionHash": "0x9e3f465952e8fb9eea7244ba4efcdde76af5d50bc4a6951c77e6ac7867231428",
    "logs": [],
    "blockNumber": 8745053,
    "cumulativeGasUsed": "7967623",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "00305447f442cac2b71a435b16d81c5b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"CancelKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Disable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_timeAdded\",\"type\":\"bool\"}],\"name\":\"ExpirationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExpireKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"KeyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NewLockSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keyManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableNonce\",\"type\":\"uint256\"}],\"name\":\"NonceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldKeyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PricingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeTrialLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"RefundPenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiration\",\"type\":\"uint256\"}],\"name\":\"RenewKeyPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKeyGranter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addLockManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefundFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"expireAndRefundFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeTrialLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_txSender\",\"type\":\"address\"}],\"name\":\"getCancelAndRefundApprovalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"approvalHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"getCancelAndRefundValueFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"getHasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageSize\",\"type\":\"uint256\"}],\"name\":\"getOwnersByPage\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokenIdFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirationTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_keyManagers\",\"type\":\"address[]\"}],\"name\":\"grantKeys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfKeys\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextAvailableNonce\",\"type\":\"uint256\"}],\"name\":\"invalidateOffchainApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKeyGranter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"isKeyOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLockManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"keyExpirationTimestampFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyManagerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyManagerToNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onKeyCancelHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyCancelHook\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onKeyPurchaseHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyPurchaseHook\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicLockVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"purchasePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundPenaltyBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceLockManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"}],\"name\":\"revokeKeyGranter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onKeyPurchaseHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onKeyCancelHook\",\"type\":\"address\"}],\"name\":\"setEventHooks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"}],\"name\":\"setKeyManagerOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeShared\",\"type\":\"uint256\"}],\"name\":\"shareKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockProtocol\",\"outputs\":[{\"internalType\":\"contract IUnlock\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateKeyPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"updateLockName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockSymbol\",\"type\":\"string\"}],\"name\":\"updateLockSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeTrialLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateRefundPenalty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Julien Genestoux (unlock-protocol.com)\",\"details\":\"ERC165 allows our contract to be queried to determine whether it implements a given interface. Every ERC-721 compliant contract must implement the ERC165 interface. https://eips.ethereum.org/EIPS/eip-721\",\"methods\":{\"balanceOf(address)\":{\"return\":\"The number of NFTs owned by `_keyOwner`, either 0 or 1.\"},\"cancelAndRefund(uint256)\":{\"details\":\"Destroys the key and sends a refund based on the amount of time remaining.\",\"params\":{\"_tokenId\":\"The id of the key to cancel.\"}},\"cancelAndRefundFor(address,uint8,bytes32,bytes32,uint256)\":{\"details\":\"Cancels a key managed by a different user and sends the funds to the msg.sender.\",\"params\":{\"_keyManager\":\"the key managed by this user will be canceled\",\"_tokenId\":\"The key to cancel\",\"_v\":\"_r _s getCancelAndRefundApprovalHash signed by the _keyOwner\"}},\"disableLock()\":{\"details\":\"Used to disable lock before migrating keys and/or destroying contract\"},\"expireAndRefundFor(address,uint256)\":{\"details\":\"Invoked by the lock owner to destroy the user's ket and perform a refund and cancellation of the key\"},\"getApproved(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_tokenId\":\"The NFT to find the approved address for\"},\"return\":\"The approved address for this NFT, or the zero address if there is none\"},\"getCancelAndRefundApprovalHash(address,address)\":{\"details\":\"this can be computed in JS instead of read from the contract.\",\"params\":{\"_keyManager\":\"The key manager's address (also the message signer)\",\"_txSender\":\"The address cancelling cancel on behalf of the keyOwner\"},\"return\":\"approvalHash The hash to sign\"},\"getCancelAndRefundValueFor(address)\":{\"details\":\"Determines how much of a refund a key owner would receive if they issued a cancelAndRefund block.timestamp. Note that due to the time required to mine a tx, the actual refund amount will be lower than what the user reads from this call.\"},\"getOwnersByPage(uint256,uint256)\":{\"params\":{\"_page\":\"the page of key owners requested when faceted by page size\",\"_pageSize\":\"the number of Key Owners requested per page\"}},\"getTokenIdFor(address)\":{\"return\":\"The tokenId of the NFT, else returns 0\"},\"getTransferFee(address,uint256)\":{\"params\":{\"_keyOwner\":\"The owner of the key check the transfer fee for.\"}},\"invalidateOffchainApproval(uint256)\":{\"details\":\"This can be used to invalidate a previously signed message.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given keyManager\",\"params\":{\"_operator\":\"operator address which you want to query the approval of\",\"_owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"keyExpirationTimestampFor(address)\":{\"details\":\"Returns the key's ExpirationTimestamp field for a given owner.Returns 0 if the owner has never owned a key for this lock\",\"params\":{\"_keyOwner\":\"address of the user for whom we search the key\"}},\"purchase(uint256,address,address,bytes)\":{\"details\":\"Purchase functionSetting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more than keyPrice is approved for spending).\",\"params\":{\"_data\":\"arbitrary data populated by the front-end which initiated the sale\",\"_recipient\":\"address of the recipient of the purchased key\",\"_referrer\":\"address of the user making the referral\",\"_value\":\"the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount (_value is ignored when using ETH)\"}},\"purchasePriceFor(address,address,bytes)\":{\"details\":\"minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"This works identically to the other function with an extra data parameter, except this function just sets data to ''\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"_approved\":\"representing the status of the approval to be set\",\"_to\":\"operator address to set the approval\"}},\"setKeyManagerOf(uint256,address)\":{\"params\":{\"_keyManager\":\"The address with the manager's rights for the given key. Setting _keyManager to address(0) means the keyOwner is also the keyManager\",\"_tokenId\":\"The id of the key to assign rights for\"}},\"shareKey(address,uint256,uint256)\":{\"params\":{\"_timeShared\":\"The amount of time shared\",\"_to\":\"The recipient of the shared key\",\"_tokenId\":\"the key to share\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token name\"},\"tokenByIndex(uint256)\":{\"details\":\"Throws if `_index` >= `totalSupply()`.\",\"params\":{\"_index\":\"A counter less than `totalSupply()`\"},\"return\":\"The token identifier for the `_index`th NFT,  (sort order not specified)\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Throws if `_index` >= `balanceOf(_keyOwner)` or if  `_keyOwner` is the zero address, representing invalid NFTs.\",\"params\":{\"_index\":\"A counter less than `balanceOf(_keyOwner)`\",\"_keyOwner\":\"An address where we are interested in NFTs owned by them\"},\"return\":\"The token identifier for the `_index`th NFT assigned to `_keyOwner`,   (sort order not specified)\"},\"tokenURI(uint256)\":{\"details\":\"URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the \\\"ERC721 Metadata JSON Schema\\\". https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\",\"params\":{\"_tokenId\":\"The iD of the token  for which we want to retrieve the URI. If 0 is passed here, we just return the appropriate baseTokenURI. If a custom URI has been set we don't return the lock address. It may be included in the custom baseTokenURI if needed.\"}},\"transfer(address,uint256)\":{\"details\":\"The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\",\"params\":{\"_value\":\"sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\"}},\"withdraw(address,uint256)\":{\"details\":\"Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.\",\"params\":{\"_amount\":\"specifies the max amount to withdraw, which may be reduced when considering the available balance. Set to 0 or MAX_UINT to withdraw everything.   * TODO: consider allowing anybody to trigger this as long as it goes to owner anyway? -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\",\"_tokenAddress\":\"specifies the token address to withdraw or 0 for ETH. This is usually the same as `tokenAddress` in MixinFunds.\"}}},\"title\":\"The Lock contract\"},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"This approves _approved to get ownership of _tokenId. Note: that since this is used for both purchase and transfer approvals the approved token may not exist.\"},\"approveBeneficiary(address,uint256)\":{\"notice\":\"An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\"},\"balanceOf(address)\":{\"notice\":\"In the specific case of a Lock, each owner can own only at most 1 key.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"getBalance(address,address)\":{\"notice\":\"Gets the current balance of the account provided.\"},\"getCancelAndRefundApprovalHash(address,address)\":{\"notice\":\"returns the hash to sign in order to allow another user to cancel on your behalf.\"},\"getHasValidKey(address)\":{\"notice\":\"Checks if the user has a non-expired key.\"},\"getOwnersByPage(uint256,uint256)\":{\"notice\":\"A function which returns a subset of the keys for this Lock as an array\"},\"getTokenIdFor(address)\":{\"notice\":\"Find the tokenId for a given user\"},\"getTransferFee(address,uint256)\":{\"notice\":\"Determines how much of a fee a key owner would need to pay in order to transfer the key to another account.  This is pro-rated so the fee goes down overtime.\"},\"grantKeys(address[],uint256[],address[])\":{\"notice\":\"Allows the Lock owner to give a collection of users a key with no charge. Each key may be assigned a different expiration date.\"},\"invalidateOffchainApproval(uint256)\":{\"notice\":\"Sets the minimum nonce for a valid off-chain approval message from the senders account.\"},\"isKeyOwner(uint256,address)\":{\"notice\":\"Checks if the given address owns the given tokenId.\"},\"numberOfOwners()\":{\"notice\":\"Public function which returns the total number of unique owners (both expired and valid).  This may be larger than totalSupply.\"},\"purchasePriceFor(address,address,bytes)\":{\"notice\":\"returns the minimum price paid for a purchase with these params.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address. When transfer is complete, this functions checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\"},\"setBaseTokenURI(string)\":{\"notice\":\"Allows the Lock owner to update the baseTokenURI for this Lock.\"},\"setEventHooks(address,address)\":{\"notice\":\"Allows a lock manager to add or remove an event hook\"},\"setKeyManagerOf(uint256,address)\":{\"notice\":\"Public function for updating transfer and cancel rights for a given key\"},\"shareKey(address,uint256,uint256)\":{\"notice\":\"Allows the key owner to safely share their key (parent key) by transferring a portion of the remaining time to a new key (child key).\"},\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Enumerate NFTs assigned to an owner\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"transfer(address,uint256)\":{\"notice\":\"An ERC-20 style transfer.\"},\"updateBeneficiary(address)\":{\"notice\":\"A function which lets the owner of the lock update the beneficiary account, which receives funds on withdrawal.\"},\"updateKeyPricing(uint256,address)\":{\"notice\":\"A function which lets the owner of the lock change the pricing for future purchases. This consists of 2 parts: The token address and the price in the given token. In order to set the token to ETH, use 0 for the token Address.\"},\"updateLockName(string)\":{\"notice\":\"Allows the Lock owner to assign a descriptive name for this Lock.\"},\"updateLockSymbol(string)\":{\"notice\":\"Allows the Lock owner to assign a Symbol for this Lock.\"},\"updateRefundPenalty(uint256,uint256)\":{\"notice\":\"Allow the owner to change the refund penalty.\"},\"updateTransferFee(uint256)\":{\"notice\":\"Allow the Lock owner to change the transfer fee.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/PublicLock.sol\":\"PublicLock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\"},\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * NOTE: This call _does not revert_ if the signature is invalid, or\\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\\n     * the zero address is returned.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return address(0);\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            return address(0);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xc89ea7e48ba477b1781b24ae963442fff1bb2af33b6178dad679a3fa2f5ab2de\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is Initializable, IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function initialize() public initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x77dba70b279e47f7f6941b433a26ba51b8484b557d250d3a78075ecea5a9b01d\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe0ed10f53955c35eecb02724538650a155aa940be3f0a54cd3bde6c6b0c6e48c\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 is Initializable, IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n    function approve(address to, uint256 tokenId) public;\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n}\\n\",\"keccak256\":\"0x3481053b3fbcb2cc24d40f208f1d65a1381febbed382eaba0f6ef7ce2296dac0\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract IERC721Enumerable is Initializable, IERC721 {\\n    function totalSupply() public view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) public view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a3efb9d8c3c6467f308592675407fceae553543d90c287d4f7370b7c2638774\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n    public returns (bytes4);\\n}\\n\",\"keccak256\":\"0x042048c375daca04b31e31c91bbae912b84b5eb818c4e31b2deb530fd2305342\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/PublicLock.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\nimport './interfaces/IPublicLock.sol';\\nimport '@openzeppelin/upgrades/contracts/Initializable.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol';\\nimport './mixins/MixinDisable.sol';\\nimport './mixins/MixinERC721Enumerable.sol';\\nimport './mixins/MixinFunds.sol';\\nimport './mixins/MixinGrantKeys.sol';\\nimport './mixins/MixinKeys.sol';\\nimport './mixins/MixinLockCore.sol';\\nimport './mixins/MixinLockMetadata.sol';\\nimport './mixins/MixinPurchase.sol';\\nimport './mixins/MixinRefunds.sol';\\nimport './mixins/MixinTransfer.sol';\\nimport './mixins/MixinSignatures.sol';\\nimport './mixins/MixinLockManagerRole.sol';\\nimport './mixins/MixinKeyGranterRole.sol';\\n\\n\\n/**\\n * @title The Lock contract\\n * @author Julien Genestoux (unlock-protocol.com)\\n * @dev ERC165 allows our contract to be queried to determine whether it implements a given interface.\\n * Every ERC-721 compliant contract must implement the ERC165 interface.\\n * https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract PublicLock is\\n  IPublicLock,\\n  Initializable,\\n  ERC165,\\n  MixinLockManagerRole,\\n  MixinKeyGranterRole,\\n  MixinSignatures,\\n  MixinFunds,\\n  MixinDisable,\\n  MixinLockCore,\\n  MixinKeys,\\n  MixinLockMetadata,\\n  MixinERC721Enumerable,\\n  MixinGrantKeys,\\n  MixinPurchase,\\n  MixinTransfer,\\n  MixinRefunds\\n{\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string memory _lockName\\n  ) public\\n    initializer()\\n  {\\n    MixinFunds._initializeMixinFunds(_tokenAddress);\\n    MixinDisable._initializeMixinDisable();\\n    MixinLockCore._initializeMixinLockCore(_lockCreator, _expirationDuration, _keyPrice, _maxNumberOfKeys);\\n    MixinLockMetadata._initializeMixinLockMetadata(_lockName);\\n    MixinERC721Enumerable._initializeMixinERC721Enumerable();\\n    MixinRefunds._initializeMixinRefunds();\\n    MixinLockManagerRole._initializeMixinLockManagerRole(_lockCreator);\\n    MixinKeyGranterRole._initializeMixinKeyGranterRole(_lockCreator);\\n    // registering the interface for erc721 with ERC165.sol using\\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\\n    _registerInterface(0x80ac58cd);\\n  }\\n\\n  /**\\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\\n   */\\n  function() external payable {}\\n}\\n\",\"keccak256\":\"0x778f8238c1949cf14c526533984b9ada5221ff9760b05c60d88db71caea11f1d\"},\"contracts/UnlockUtils.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n// This contract provides some utility methods for use with the unlock protocol smart contracts.\\n// Borrowed from:\\n// https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L943\\n\\nlibrary UnlockUtils {\\n\\n  function strConcat(\\n    string memory _a,\\n    string memory _b,\\n    string memory _c,\\n    string memory _d\\n  ) internal pure\\n    returns (string memory _concatenatedString)\\n  {\\n    return string(abi.encodePacked(_a, _b, _c, _d));\\n  }\\n\\n  function uint2Str(\\n    uint _i\\n  ) internal pure\\n    returns (string memory _uintAsString)\\n  {\\n    // make a copy of the param to avoid security/no-assign-params error\\n    uint c = _i;\\n    if (_i == 0) {\\n      return '0';\\n    }\\n    uint j = _i;\\n    uint len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint k = len - 1;\\n    while (c != 0) {\\n      bstr[k--] = byte(uint8(48 + c % 10));\\n      c /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function address2Str(\\n    address _addr\\n  ) internal pure\\n    returns(string memory)\\n  {\\n    bytes32 value = bytes32(uint256(_addr));\\n    bytes memory alphabet = '0123456789abcdef';\\n    bytes memory str = new bytes(42);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint i = 0; i < 20; i++) {\\n      str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\\n      str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n    return string(str);\\n  }\\n}\",\"keccak256\":\"0x19217cfe9d970bee4056ff900b9b2df1a9234862dda03fb43574f3e99d8aedcf\"},\"contracts/interfaces/IPublicLock.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n* @title The PublicLock Interface\\n* @author Nick Furfaro (unlock-protocol.com)\\n */\\n\\n\\ncontract IPublicLock\\n{\\n\\n// See indentationissue description here:\\n// https://github.com/duaraghav8/Ethlint/issues/268\\n// solium-disable indentation\\n\\n  /// Functions\\n\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\\n   */\\n  function() external payable;\\n\\n  /**\\n   * @dev Never used directly\\n   */\\n  function initialize() external;\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() public pure returns (uint);\\n\\n  /**\\n  * @notice Gets the current balance of the account provided.\\n  * @param _tokenAddress The token type to retrieve the balance of.\\n  * @param _account The account to get the balance of.\\n  * @return The number of tokens of the given type for the given address, possibly 0.\\n  */\\n  function getBalance(\\n    address _tokenAddress,\\n    address _account\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n  * @notice Used to disable lock before migrating keys and/or destroying contract.\\n  * @dev Throws if called by other than a lock manager.\\n  * @dev Throws if lock contract has already been disabled.\\n  */\\n  function disableLock() external;\\n\\n  /**\\n   * @dev Called by a lock manager or beneficiary to withdraw all funds from the lock and send them to the `beneficiary`.\\n   * @dev Throws if called by other than a lock manager or beneficiary\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\\n   * use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * @notice An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\\n   */\\n  function approveBeneficiary(\\n    address _spender,\\n    uint _amount\\n  ) external\\n    returns (bool);\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * A function which lets a Lock manager update the beneficiary account,\\n   * which receives funds on withdrawal.\\n   * @dev Throws if called by other than a Lock manager or beneficiary\\n   * @dev Throws if _beneficiary is address(0)\\n   * @param _beneficiary The new address to set as the beneficiary\\n   */\\n  function updateBeneficiary( address _beneficiary ) external;\\n\\n    /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice Find the tokenId for a given user\\n   * @return The tokenId of the NFT, else returns 0\\n   * @param _account The address of the key owner\\n  */\\n  function getTokenIdFor(\\n    address _account\\n  ) external view returns (uint);\\n\\n  /**\\n  * A function which returns a subset of the keys for this Lock as an array\\n  * @param _page the page of key owners requested when faceted by page size\\n  * @param _pageSize the number of Key Owners requested per page\\n  * @dev Throws if there are no key owners yet\\n  */\\n  function getOwnersByPage(\\n    uint _page,\\n    uint _pageSize\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * Checks if the given address owns the given tokenId.\\n   * @param _tokenId The tokenId of the key to check\\n   * @param _keyOwner The potential key owners address\\n   */\\n  function isKeyOwner(\\n    uint _tokenId,\\n    address _keyOwner\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _keyOwner address of the user for whom we search the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    address _keyOwner\\n  ) external view returns (uint timestamp);\\n\\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows a Lock manager to assign a descriptive name for this Lock.\\n   * @param _lockName The new name for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockName(\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to assign a Symbol for this Lock.\\n   * @param _lockSymbol The new Symbol for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockSymbol(\\n    string calldata _lockSymbol\\n  ) external;\\n\\n  /**\\n    * @dev Gets the token symbol\\n    * @return string representing the token symbol\\n    */\\n  function symbol()\\n    external view\\n    returns(string memory);\\n\\n    /**\\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _baseTokenURI String representing the base of the URI for this lock.\\n   */\\n  function setBaseTokenURI(\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * @notice Allows a Lock manager to add or remove an event hook\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _recipient address of the recipient of the purchased key\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled. Throws if lock is sold-out. Throws if _recipient == address(0).\\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if a Lock manager increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  */\\n  function purchase(\\n    uint256 _value,\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee a key owner would need to pay in order to\\n   * transfer the key to another account.  This is pro-rated so the fee goes down\\n   * overtime.\\n   * @dev Throws if _keyOwner does not have a valid key\\n   * @param _keyOwner The owner of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    address _keyOwner,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\\n   * @param _keyOwner The key owner to whom we wish to send a refund to\\n   * @param amount The amount to refund the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    address _keyOwner,\\n    uint amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * @dev Cancels a key managed by a different user and sends the funds to the keyOwner.\\n   * @param _keyManager the key managed by this user will be canceled\\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyManager\\n   * @param _tokenId The key to cancel\\n   */\\n  function cancelAndRefundFor(\\n    address _keyManager,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint _tokenId\\n  ) external;\\n\\n  /**\\n   * @notice Sets the minimum nonce for a valid off-chain approval message from the\\n   * senders account.\\n   * @dev This can be used to invalidate a previously signed message.\\n   */\\n  function invalidateOffchainApproval(\\n    uint _nextAvailableNonce\\n  ) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _keyOwner The key owner to get the refund value for.\\n   * a cancelAndRefund block.timestamp.\\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   */\\n  function getCancelAndRefundValueFor(\\n    address _keyOwner\\n  ) external view returns (uint refund);\\n\\n  function keyManagerToNonce(address ) external view returns (uint256 );\\n\\n  /**\\n   * @notice returns the hash to sign in order to allow another user to cancel on your behalf.\\n   * @dev this can be computed in JS instead of read from the contract.\\n   * @param _keyManager The key manager's address (also the message signer)\\n   * @param _txSender The address cancelling cancel on behalf of the keyOwner\\n   * @return approvalHash The hash to sign\\n   */\\n  function getCancelAndRefundApprovalHash(\\n    address _keyManager,\\n    address _txSender\\n  ) external view returns (bytes32 approvalHash);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  function onKeyPurchaseHook() external view returns(address);\\n\\n  function onKeyCancelHook() external view returns(address);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  ///===================================================================\\n  /// Auto-generated getter functions from public state variables\\n\\n  function beneficiary() external view returns (address );\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function isAlive() external view returns (bool );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function owners(uint256 ) external view returns (address );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n\\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool );\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address _owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n    function approve(address to, uint256 tokenId) public;\\n\\n    /**\\n    * @notice Get the approved address for a single NFT\\n    * @dev Throws if `_tokenId` is not a valid NFT.\\n    * @param _tokenId The NFT to find the approved address for\\n    * @return The approved address for this NFT, or the zero address if there is none\\n    */\\n    function getApproved(uint256 _tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n    function isApprovedForAll(address _owner, address operator) public view returns (bool);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n\\n    function totalSupply() public view returns (uint256);\\n    function tokenOfOwnerByIndex(address _owner, uint256 index) public view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) public view returns (uint256);\\n\\n\\n\\n    /**\\n     * @notice An ERC-20 style transfer.\\n     * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n     * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n     * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n     */\\n    function transfer(\\n      address _to,\\n      uint _value\\n    ) external\\n      returns (bool success);\\n}\\n\",\"keccak256\":\"0x27faded87991ac7b46d22ac887d46674d219fdf1ac4c6661dc1cacdcfb5707db\"},\"contracts/interfaces/IUnlock.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\n/**\\n * @title The Unlock Interface\\n * @author Nick Furfaro (unlock-protocol.com)\\n**/\\n\\ninterface IUnlock\\n{\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n  * @dev Create lock\\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n  * @param _salt an identifier for the Lock, which is unique for the user.\\n  * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n  * to know the lock's address before the transaction is mined.\\n  */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 _salt\\n  ) external;\\n\\n    /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  )\\n    external;\\n\\n    /**\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  )\\n    external;\\n\\n    /**\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  )\\n    external\\n    view\\n    returns(uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns(string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns(string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId()\\n    external\\n    view\\n    returns(uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  )\\n    external;\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct() external view returns(uint);\\n\\n  function totalDiscountGranted() external view returns(uint);\\n\\n  function locks(address) external view returns(bool deployed, uint totalSales, uint yieldedDiscountTokens);\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress() external view returns(address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(address) external view returns(address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns(address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns(address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase() external view returns(uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns(uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns(bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns(address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x0b0bb27895b734937c4c0fd855d0f5eadf2cd8113a3ead736173a1a71c1e5e30\"},\"contracts/interfaces/hooks/ILockKeyCancelHook.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\n/**\\n * @notice Functions to be implemented by a keyCancelHook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockKeyCancelHook\\n{\\n  /**\\n   * @notice If the lock owner has registered an implementer\\n   * then this hook is called with every key cancel.\\n   * @param operator the msg.sender issuing the cancel\\n   * @param to the account which had the key canceled\\n   * @param refund the amount sent to the `to` account (ETH or a ERC-20 token)\\n   */\\n  function onKeyCancel(\\n    address operator,\\n    address to,\\n    uint256 refund\\n  ) external;\\n}\",\"keccak256\":\"0x695b7a70e8a0d700b27486d19cea652916eb0a42fbac29005ca1143e107ae73d\"},\"contracts/interfaces/hooks/ILockKeyPurchaseHook.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\n/**\\n * @notice Functions to be implemented by a keyPurchaseHook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockKeyPurchaseHook\\n{\\n  /**\\n   * @notice Used to determine the purchase price before issueing a transaction.\\n   * This allows the hook to offer a discount on purchases.\\n   * This may revert to prevent a purchase.\\n   * @param from the msg.sender making the purchase\\n   * @param recipient the account which will be granted a key\\n   * @param referrer the account which referred this key sale\\n   * @param data arbitrary data populated by the front-end which initiated the sale\\n   * @return the minimum value/price required to purchase a key with these settings\\n   * @dev the lock's address is the `msg.sender` when this function is called via\\n   * the lock's `purchasePriceFor` function\\n   */\\n  function keyPurchasePrice(\\n    address from,\\n    address recipient,\\n    address referrer,\\n    bytes calldata data\\n  ) external view\\n    returns (uint minKeyPrice);\\n\\n  /**\\n   * @notice If the lock owner has registered an implementer then this hook\\n   * is called with every key sold.\\n   * @param from the msg.sender making the purchase\\n   * @param recipient the account which will be granted a key\\n   * @param referrer the account which referred this key sale\\n   * @param data arbitrary data populated by the front-end which initiated the sale\\n   * @param minKeyPrice the price including any discount granted from calling this\\n   * hook's `keyPurchasePrice` function\\n   * @param pricePaid the value/pricePaid included with the purchase transaction\\n   * @dev the lock's address is the `msg.sender` when this function is called\\n   */\\n  function onKeyPurchase(\\n    address from,\\n    address recipient,\\n    address referrer,\\n    bytes calldata data,\\n    uint minKeyPrice,\\n    uint pricePaid\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2add34b02d4189b207f6ad34b2881d4145080e6f8b78dd642aff360c6ab4a0d1\"},\"contracts/mixins/MixinDisable.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinFunds.sol';\\nimport './MixinLockManagerRole.sol';\\n\\n/**\\n * @title Mixin allowing the Lock owner to disable a Lock (preventing new purchases)\\n * and then destroy it.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinDisable is\\n  MixinLockManagerRole,\\n  MixinFunds\\n{\\n  // Used to disable payable functions when deprecating an old lock\\n  bool public isAlive;\\n\\n  event Disable();\\n\\n  function _initializeMixinDisable(\\n  ) internal\\n  {\\n    isAlive = true;\\n  }\\n\\n  // Only allow usage when contract is Alive\\n  modifier onlyIfAlive() {\\n    require(isAlive, 'LOCK_DEPRECATED');\\n    _;\\n  }\\n\\n  /**\\n  * @dev Used to disable lock before migrating keys and/or destroying contract\\n   */\\n  function disableLock()\\n    external\\n    onlyLockManager\\n    onlyIfAlive\\n  {\\n    emit Disable();\\n    isAlive = false;\\n  }\\n}\",\"keccak256\":\"0x6aa1d472077028d61f71005830950f1a8224e375ecd5a67c79ae753e02f3dbf9\"},\"contracts/mixins/MixinERC721Enumerable.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol';\\n\\n\\n/**\\n * @title Implements the ERC-721 Enumerable extension.\\n */\\ncontract MixinERC721Enumerable is\\n  IERC721Enumerable,\\n  ERC165,\\n  MixinLockCore, // Implements totalSupply\\n  MixinKeys\\n{\\n  function _initializeMixinERC721Enumerable() internal\\n  {\\n    /**\\n     * register the supported interface to conform to ERC721Enumerable via ERC165\\n     * 0x780e9d63 ===\\n     *     bytes4(keccak256('totalSupply()')) ^\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\\n     *     bytes4(keccak256('tokenByIndex(uint256)'))\\n     */\\n    _registerInterface(0x780e9d63);\\n  }\\n\\n  /// @notice Enumerate valid NFTs\\n  /// @dev Throws if `_index` >= `totalSupply()`.\\n  /// @param _index A counter less than `totalSupply()`\\n  /// @return The token identifier for the `_index`th NFT,\\n  ///  (sort order not specified)\\n  function tokenByIndex(\\n    uint256 _index\\n  ) public view\\n    returns (uint256)\\n  {\\n    require(_index < _totalSupply, 'OUT_OF_RANGE');\\n    return _index;\\n  }\\n\\n  /// @notice Enumerate NFTs assigned to an owner\\n  /// @dev Throws if `_index` >= `balanceOf(_keyOwner)` or if\\n  ///  `_keyOwner` is the zero address, representing invalid NFTs.\\n  /// @param _keyOwner An address where we are interested in NFTs owned by them\\n  /// @param _index A counter less than `balanceOf(_keyOwner)`\\n  /// @return The token identifier for the `_index`th NFT assigned to `_keyOwner`,\\n  ///   (sort order not specified)\\n  function tokenOfOwnerByIndex(\\n    address _keyOwner,\\n    uint256 _index\\n  ) public view\\n    returns (uint256)\\n  {\\n    require(_index == 0, 'ONLY_ONE_KEY_PER_OWNER');\\n    return getTokenIdFor(_keyOwner);\\n  }\\n}\",\"keccak256\":\"0x3769b8d1355ef7616c441b2fd958e83e3a1b945e146860c52a07648509c04054\"},\"contracts/mixins/MixinFunds.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol';\\n\\n\\n/**\\n * @title An implementation of the money related functions.\\n * @author HardlyDifficult (unlock-protocol.com)\\n */\\ncontract MixinFunds\\n{\\n  using Address for address payable;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * The token-type that this Lock is priced in.  If 0, then use ETH, else this is\\n   * a ERC20 token address.\\n   */\\n  address public tokenAddress;\\n\\n  function _initializeMixinFunds(\\n    address _tokenAddress\\n  ) internal\\n  {\\n    tokenAddress = _tokenAddress;\\n    require(\\n      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\\n      'INVALID_TOKEN'\\n    );\\n  }\\n\\n  /**\\n   * Gets the current balance of the account provided.\\n   */\\n  function getBalance(\\n    address _tokenAddress,\\n    address _account\\n  ) public view\\n    returns (uint)\\n  {\\n    if(_tokenAddress == address(0)) {\\n      return _account.balance;\\n    } else {\\n      return IERC20(_tokenAddress).balanceOf(_account);\\n    }\\n  }\\n\\n  /**\\n   * Transfers funds from the contract to the account provided.\\n   *\\n   * Security: be wary of re-entrancy when calling this function.\\n   */\\n  function _transfer(\\n    address _tokenAddress,\\n    address _to,\\n    uint _amount\\n  ) internal\\n  {\\n    if(_amount > 0) {\\n      if(_tokenAddress == address(0)) {\\n        // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n        address(uint160(_to)).sendValue(_amount);\\n      } else {\\n        IERC20 token = IERC20(_tokenAddress);\\n        token.safeTransfer(_to, _amount);\\n      }\\n    }\\n  }\\n}\",\"keccak256\":\"0x123e8440584c0b7270bd818fafebec60f09ad41bd73ec277898966c323066633\"},\"contracts/mixins/MixinGrantKeys.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinKeys.sol';\\nimport './MixinKeyGranterRole.sol';\\n\\n\\n/**\\n * @title Mixin allowing the Lock owner to grant / gift keys to users.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinGrantKeys is\\n  MixinKeyGranterRole,\\n  MixinKeys\\n{\\n  /**\\n   * Allows the Lock owner to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external\\n    onlyKeyGranterOrManager\\n  {\\n    for(uint i = 0; i < _recipients.length; i++) {\\n      address recipient = _recipients[i];\\n      uint expirationTimestamp = _expirationTimestamps[i];\\n      address keyManager = _keyManagers[i];\\n\\n      require(recipient != address(0), 'INVALID_ADDRESS');\\n\\n      Key storage toKey = keyByOwner[recipient];\\n      require(expirationTimestamp > toKey.expirationTimestamp, 'ALREADY_OWNS_KEY');\\n\\n      uint idTo = toKey.tokenId;\\n\\n      if(idTo == 0) {\\n        _assignNewTokenId(toKey);\\n        idTo = toKey.tokenId;\\n        _recordOwner(recipient, idTo);\\n      }\\n      // Set the key Manager\\n      _setKeyManagerOf(idTo, keyManager);\\n      emit KeyManagerChanged(idTo, keyManager);\\n\\n      toKey.expirationTimestamp = expirationTimestamp;\\n      // trigger event\\n      emit Transfer(\\n        address(0), // This is a creation.\\n        recipient,\\n        idTo\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6e13591636bafd859d81eb6541603a5caa8404d98fa8207a04dd324be7e2cc17\"},\"contracts/mixins/MixinKeyGranterRole.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n// This contract mostly follows the pattern established by openzeppelin in\\n// openzeppelin/contracts-ethereum-package/contracts/access/roles\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol';\\nimport './MixinLockManagerRole.sol';\\n\\n\\ncontract MixinKeyGranterRole is MixinLockManagerRole {\\n  using Roles for Roles.Role;\\n\\n  event KeyGranterAdded(address indexed account);\\n  event KeyGranterRemoved(address indexed account);\\n\\n  Roles.Role private keyGranters;\\n\\n  function _initializeMixinKeyGranterRole(address sender) internal {\\n    if (!isKeyGranter(sender)) {\\n      keyGranters.add(sender);\\n    }\\n  }\\n\\n  modifier onlyKeyGranterOrManager() {\\n    require(isKeyGranter(msg.sender) || isLockManager(msg.sender), 'MixinKeyGranter: caller does not have the KeyGranter or LockManager role');\\n    _;\\n  }\\n\\n  function isKeyGranter(address account) public view returns (bool) {\\n    return keyGranters.has(account);\\n  }\\n\\n  function addKeyGranter(address account) public onlyLockManager {\\n    keyGranters.add(account);\\n    emit KeyGranterAdded(account);\\n  }\\n\\n  function revokeKeyGranter(address _granter) public onlyLockManager {\\n    keyGranters.remove(_granter);\\n    emit KeyGranterRemoved(_granter);\\n  }\\n}\\n\",\"keccak256\":\"0xa1ef1a24e6d5bc1a815330cbd4eb95e4d8bc0e368801256c45f1982932609953\"},\"contracts/mixins/MixinKeys.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinLockCore.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\n\\n\\n/**\\n * @title Mixin for managing `Key` data, as well as the * Approval related functions needed to meet the ERC721\\n * standard.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinKeys is\\n  MixinLockCore\\n{\\n  using SafeMath for uint;\\n\\n  // The struct for a key\\n  struct Key {\\n    uint tokenId;\\n    uint expirationTimestamp;\\n  }\\n\\n  // Emitted when the Lock owner expires a user's Key\\n  event ExpireKey(uint indexed tokenId);\\n\\n  // Emitted when the expiration of a key is modified\\n  event ExpirationChanged(\\n    uint indexed _tokenId,\\n    uint _amount,\\n    bool _timeAdded\\n  );\\n\\n  event KeyManagerChanged(uint indexed _tokenId, address indexed _newManager);\\n\\n\\n  // Keys\\n  // Each owner can have at most exactly one key\\n  // TODO: could we use public here? (this could be confusing though because it getter will\\n  // return 0 values when missing a key)\\n  mapping (address => Key) internal keyByOwner;\\n\\n  // Each tokenId can have at most exactly one owner at a time.\\n  // Returns 0 if the token does not exist\\n  // TODO: once we decouple tokenId from owner address (incl in js), then we can consider\\n  // merging this with totalSupply into an array instead.\\n  mapping (uint => address) internal _ownerOf;\\n\\n  // Addresses of owners are also stored in an array.\\n  // Addresses are never removed by design to avoid abuses around referals\\n  address[] public owners;\\n\\n  // A given key has both an owner and a manager.\\n  // If keyManager == address(0) then the key owner is also the manager\\n  // Each key can have at most 1 keyManager.\\n  mapping (uint => address) public keyManagerOf;\\n\\n    // Keeping track of approved transfers\\n  // This is a mapping of addresses which have approved\\n  // the transfer of a key to another address where their key can be transferred\\n  // Note: the approver may actually NOT have a key... and there can only\\n  // be a single approved address\\n  mapping (uint => address) private approved;\\n\\n    // Keeping track of approved operators for a given Key manager.\\n  // This approves a given operator for all keys managed by the calling \\\"keyManager\\\"\\n  // The caller may not currently be the keyManager for ANY keys.\\n  // These approvals are never reset/revoked automatically, unlike \\\"approved\\\",\\n  // which is reset on transfer.\\n  mapping (address => mapping (address => bool)) private managerToOperatorApproved;\\n\\n    // Ensure that the caller is the keyManager of the key\\n  // or that the caller has been approved\\n  // for ownership of that key\\n  modifier onlyKeyManagerOrApproved(\\n    uint _tokenId\\n  )\\n  {\\n    require(\\n      _isKeyManager(_tokenId, msg.sender) ||\\n      _isApproved(_tokenId, msg.sender) ||\\n      isApprovedForAll(_ownerOf[_tokenId], msg.sender),\\n      'ONLY_KEY_MANAGER_OR_APPROVED'\\n    );\\n    _;\\n  }\\n\\n  // Ensures that an owner owns or has owned a key in the past\\n  modifier ownsOrHasOwnedKey(\\n    address _keyOwner\\n  ) {\\n    require(\\n      keyByOwner[_keyOwner].expirationTimestamp > 0, 'HAS_NEVER_OWNED_KEY'\\n    );\\n    _;\\n  }\\n\\n  // Ensures that an owner has a valid key\\n  modifier hasValidKey(\\n    address _user\\n  ) {\\n    require(\\n      getHasValidKey(_user), 'KEY_NOT_VALID'\\n    );\\n    _;\\n  }\\n\\n  // Ensures that a key has an owner\\n  modifier isKey(\\n    uint _tokenId\\n  ) {\\n    require(\\n      _ownerOf[_tokenId] != address(0), 'NO_SUCH_KEY'\\n    );\\n    _;\\n  }\\n\\n  // Ensure that the caller owns the key\\n  modifier onlyKeyOwner(\\n    uint _tokenId\\n  ) {\\n    require(\\n      isKeyOwner(_tokenId, msg.sender), 'ONLY_KEY_OWNER'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * In the specific case of a Lock, each owner can own only at most 1 key.\\n   * @return The number of NFTs owned by `_keyOwner`, either 0 or 1.\\n  */\\n  function balanceOf(\\n    address _keyOwner\\n  )\\n    public\\n    view\\n    returns (uint)\\n  {\\n    require(_keyOwner != address(0), 'INVALID_ADDRESS');\\n    return getHasValidKey(_keyOwner) ? 1 : 0;\\n  }\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   */\\n  function getHasValidKey(\\n    address _keyOwner\\n  )\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return keyByOwner[_keyOwner].expirationTimestamp > block.timestamp;\\n  }\\n\\n  /**\\n   * @notice Find the tokenId for a given user\\n   * @return The tokenId of the NFT, else returns 0\\n  */\\n  function getTokenIdFor(\\n    address _account\\n  ) public view\\n    returns (uint)\\n  {\\n    return keyByOwner[_account].tokenId;\\n  }\\n\\n /**\\n  * A function which returns a subset of the keys for this Lock as an array\\n  * @param _page the page of key owners requested when faceted by page size\\n  * @param _pageSize the number of Key Owners requested per page\\n  */\\n  function getOwnersByPage(uint _page, uint _pageSize)\\n    public\\n    view\\n    returns (address[] memory)\\n  {\\n    uint pageSize = _pageSize;\\n    uint _startIndex = _page * pageSize;\\n    uint endOfPageIndex;\\n\\n    if (_startIndex + pageSize > owners.length) {\\n      endOfPageIndex = owners.length;\\n      pageSize = owners.length - _startIndex;\\n    } else {\\n      endOfPageIndex = (_startIndex + pageSize);\\n    }\\n\\n    // new temp in-memory array to hold pageSize number of requested owners:\\n    address[] memory ownersByPage = new address[](pageSize);\\n    uint pageIndex = 0;\\n\\n    // Build the requested set of owners into a new temporary array:\\n    for (uint i = _startIndex; i < endOfPageIndex; i++) {\\n      ownersByPage[pageIndex] = owners[i];\\n      pageIndex++;\\n    }\\n\\n    return ownersByPage;\\n  }\\n\\n  /**\\n   * Checks if the given address owns the given tokenId.\\n   */\\n  function isKeyOwner(\\n    uint _tokenId,\\n    address _keyOwner\\n  ) public view\\n    returns (bool)\\n  {\\n    return _ownerOf[_tokenId] == _keyOwner;\\n  }\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _keyOwner address of the user for whom we search the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    address _keyOwner\\n  ) public view\\n    returns (uint)\\n  {\\n    return keyByOwner[_keyOwner].expirationTimestamp;\\n  }\\n\\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners()\\n    public\\n    view\\n    returns (uint)\\n  {\\n    return owners.length;\\n  }\\n  // Returns the owner of a given tokenId\\n  function ownerOf(\\n    uint _tokenId\\n  ) public view\\n    returns(address)\\n  {\\n    return _ownerOf[_tokenId];\\n  }\\n\\n  /**\\n  * @notice Public function for updating transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address with the manager's rights for the given key.\\n  * Setting _keyManager to address(0) means the keyOwner is also the keyManager\\n   */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) public\\n    isKey(_tokenId)\\n  {\\n    require(\\n      _isKeyManager(_tokenId, msg.sender) ||\\n      isLockManager(msg.sender),\\n      'UNAUTHORIZED_KEY_MANAGER_UPDATE'\\n    );\\n    _setKeyManagerOf(_tokenId, _keyManager);\\n  }\\n\\n  function _setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) internal\\n  {\\n    if(keyManagerOf[_tokenId] != _keyManager) {\\n      keyManagerOf[_tokenId] = _keyManager;\\n      _clearApproval(_tokenId);\\n      emit KeyManagerChanged(_tokenId, address(0));\\n    }\\n  }\\n\\n    /**\\n   * This approves _approved to get ownership of _tokenId.\\n   * Note: that since this is used for both purchase and transfer approvals\\n   * the approved token may not exist.\\n   */\\n  function approve(\\n    address _approved,\\n    uint _tokenId\\n  )\\n    public\\n    onlyIfAlive\\n    onlyKeyManagerOrApproved(_tokenId)\\n  {\\n    require(msg.sender != _approved, 'APPROVE_SELF');\\n\\n    approved[_tokenId] = _approved;\\n    emit Approval(_ownerOf[_tokenId], _approved, _tokenId);\\n  }\\n\\n    /**\\n   * @notice Get the approved address for a single NFT\\n   * @dev Throws if `_tokenId` is not a valid NFT.\\n   * @param _tokenId The NFT to find the approved address for\\n   * @return The approved address for this NFT, or the zero address if there is none\\n   */\\n  function getApproved(\\n    uint _tokenId\\n  ) public view\\n    isKey(_tokenId)\\n    returns (address)\\n  {\\n    address approvedRecipient = approved[_tokenId];\\n    return approvedRecipient;\\n  }\\n\\n    /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) public view\\n    returns (bool)\\n  {\\n    uint tokenId = keyByOwner[_owner].tokenId;\\n    address keyManager = keyManagerOf[tokenId];\\n    if(keyManager == address(0)) {\\n      return managerToOperatorApproved[_owner][_operator];\\n    } else {\\n      return managerToOperatorApproved[keyManager][_operator];\\n    }\\n  }\\n\\n  /**\\n  * Returns true if _keyManager is the manager of the key\\n  * identified by _tokenId\\n   */\\n  function _isKeyManager(\\n    uint _tokenId,\\n    address _keyManager\\n  ) internal view\\n    returns (bool)\\n  {\\n    if(keyManagerOf[_tokenId] == _keyManager ||\\n      (keyManagerOf[_tokenId] == address(0) && isKeyOwner(_tokenId, _keyManager))) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * Assigns the key a new tokenId (from totalSupply) if it does not already have\\n   * one assigned.\\n   */\\n  function _assignNewTokenId(\\n    Key storage _key\\n  ) internal\\n  {\\n    if (_key.tokenId == 0) {\\n      // This is a brand new owner\\n      // We increment the tokenId counter\\n      _totalSupply++;\\n      // we assign the incremented `_totalSupply` as the tokenId for the new key\\n      _key.tokenId = _totalSupply;\\n    }\\n  }\\n\\n  /**\\n   * Records the owner of a given tokenId\\n   */\\n  function _recordOwner(\\n    address _keyOwner,\\n    uint _tokenId\\n  ) internal\\n  {\\n    if (_ownerOf[_tokenId] != _keyOwner) {\\n      // TODO: this may include duplicate entries\\n      owners.push(_keyOwner);\\n      // We register the owner of the tokenID\\n      _ownerOf[_tokenId] = _keyOwner;\\n    }\\n  }\\n\\n  /**\\n  * @notice Modify the expirationTimestamp of a key\\n  * by a given amount.\\n  * @param _tokenId The ID of the key to modify.\\n  * @param _deltaT The amount of time in seconds by which\\n  * to modify the keys expirationTimestamp\\n  * @param _addTime Choose whether to increase or decrease\\n  * expirationTimestamp (false == decrease, true == increase)\\n  * @dev Throws if owner does not have a valid key.\\n  */\\n  function _timeMachine(\\n    uint _tokenId,\\n    uint256 _deltaT,\\n    bool _addTime\\n  ) internal\\n  {\\n    address tokenOwner = _ownerOf[_tokenId];\\n    require(tokenOwner != address(0), 'NON_EXISTENT_KEY');\\n    Key storage key = keyByOwner[tokenOwner];\\n    uint formerTimestamp = key.expirationTimestamp;\\n    bool validKey = getHasValidKey(tokenOwner);\\n    if(_addTime) {\\n      if(validKey) {\\n        key.expirationTimestamp = formerTimestamp.add(_deltaT);\\n      } else {\\n        key.expirationTimestamp = block.timestamp.add(_deltaT);\\n      }\\n    } else {\\n      key.expirationTimestamp = formerTimestamp.sub(_deltaT);\\n    }\\n    emit ExpirationChanged(_tokenId, _deltaT, _addTime);\\n  }\\n\\n    /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _to operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   */\\n  function setApprovalForAll(\\n    address _to,\\n    bool _approved\\n  ) public\\n    onlyIfAlive\\n  {\\n    require(_to != msg.sender, 'APPROVE_SELF');\\n    managerToOperatorApproved[msg.sender][_to] = _approved;\\n    emit ApprovalForAll(msg.sender, _to, _approved);\\n  }\\n\\n    /**\\n   * @dev Checks if the given user is approved to transfer the tokenId.\\n   */\\n  function _isApproved(\\n    uint _tokenId,\\n    address _user\\n  ) internal view\\n    returns (bool)\\n  {\\n    return approved[_tokenId] == _user;\\n  }\\n\\n    /**\\n   * @dev Function to clear current approval of a given token ID\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   */\\n  function _clearApproval(\\n    uint256 _tokenId\\n  ) internal\\n  {\\n    if (approved[_tokenId] != address(0)) {\\n      approved[_tokenId] = address(0);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x658845db8e2c1026e568597f557cde475d6d94a3ab51c4e1a4a6ca2adb1ba7d0\"},\"contracts/mixins/MixinLockCore.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol';\\nimport './MixinDisable.sol';\\nimport './MixinLockManagerRole.sol';\\nimport '../interfaces/IUnlock.sol';\\nimport './MixinFunds.sol';\\nimport '../interfaces/hooks/ILockKeyCancelHook.sol';\\nimport '../interfaces/hooks/ILockKeyPurchaseHook.sol';\\n\\n\\n/**\\n * @title Mixin for core lock data and functions.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinLockCore is\\n  IERC721Enumerable,\\n  MixinLockManagerRole,\\n  MixinFunds,\\n  MixinDisable\\n{\\n  using Address for address;\\n\\n  event Withdrawal(\\n    address indexed sender,\\n    address indexed tokenAddress,\\n    address indexed beneficiary,\\n    uint amount\\n  );\\n\\n  event PricingChanged(\\n    uint oldKeyPrice,\\n    uint keyPrice,\\n    address oldTokenAddress,\\n    address tokenAddress\\n  );\\n\\n  // Unlock Protocol address\\n  // TODO: should we make that private/internal?\\n  IUnlock public unlockProtocol;\\n\\n  // Duration in seconds for which the keys are valid, after creation\\n  // should we take a smaller type use less gas?\\n  // TODO: add support for a timestamp instead of duration\\n  uint public expirationDuration;\\n\\n  // price in wei of the next key\\n  // TODO: allow support for a keyPriceCalculator which could set prices dynamically\\n  uint public keyPrice;\\n\\n  // Max number of keys sold if the keyReleaseMechanism is public\\n  uint public maxNumberOfKeys;\\n\\n  // A count of how many new key purchases there have been\\n  uint internal _totalSupply;\\n\\n  // The account which will receive funds on withdrawal\\n  address public beneficiary;\\n\\n  // The denominator component for values specified in basis points.\\n  uint internal constant BASIS_POINTS_DEN = 10000;\\n\\n  ILockKeyPurchaseHook public onKeyPurchaseHook;\\n  ILockKeyCancelHook public onKeyCancelHook;\\n\\n  // Ensure that the Lock has not sold all of its keys.\\n  modifier notSoldOut() {\\n    require(maxNumberOfKeys > _totalSupply, 'LOCK_SOLD_OUT');\\n    _;\\n  }\\n\\n  modifier onlyLockManagerOrBeneficiary()\\n  {\\n    require(\\n      isLockManager(msg.sender) || msg.sender == beneficiary,\\n      'ONLY_LOCK_MANAGER_OR_BENEFICIARY'\\n    );\\n    _;\\n  }\\n\\n  function _initializeMixinLockCore(\\n    address _beneficiary,\\n    uint _expirationDuration,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys\\n  ) internal\\n  {\\n    require(_expirationDuration <= 100 * 365 * 24 * 60 * 60, 'MAX_EXPIRATION_100_YEARS');\\n    unlockProtocol = IUnlock(msg.sender); // Make sure we link back to Unlock's smart contract.\\n    beneficiary = _beneficiary;\\n    expirationDuration = _expirationDuration;\\n    keyPrice = _keyPrice;\\n    maxNumberOfKeys = _maxNumberOfKeys;\\n  }\\n\\n  // The version number of the current implementation on this network\\n  function publicLockVersion(\\n  ) public pure\\n    returns (uint)\\n  {\\n    return 8;\\n  }\\n\\n  /**\\n   * @dev Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   *\\n   * TODO: consider allowing anybody to trigger this as long as it goes to owner anyway?\\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\\n   * use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    uint _amount\\n  ) external\\n    onlyLockManagerOrBeneficiary\\n  {\\n    uint balance = getBalance(_tokenAddress, address(this));\\n    uint amount;\\n    if(_amount == 0 || _amount > balance)\\n    {\\n      require(balance > 0, 'NOT_ENOUGH_FUNDS');\\n      amount = balance;\\n    }\\n    else\\n    {\\n      amount = _amount;\\n    }\\n\\n    emit Withdrawal(msg.sender, _tokenAddress, beneficiary, amount);\\n    // Security: re-entrancy not a risk as this is the last line of an external function\\n    _transfer(_tokenAddress, beneficiary, amount);\\n  }\\n\\n  /**\\n   * A function which lets the owner of the lock change the pricing for future purchases.\\n   * This consists of 2 parts: The token address and the price in the given token.\\n   * In order to set the token to ETH, use 0 for the token Address.\\n   */\\n  function updateKeyPricing(\\n    uint _keyPrice,\\n    address _tokenAddress\\n  )\\n    external\\n    onlyLockManager\\n    onlyIfAlive\\n  {\\n    uint oldKeyPrice = keyPrice;\\n    address oldTokenAddress = tokenAddress;\\n    require(\\n      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\\n      'INVALID_TOKEN'\\n    );\\n    keyPrice = _keyPrice;\\n    tokenAddress = _tokenAddress;\\n    emit PricingChanged(oldKeyPrice, keyPrice, oldTokenAddress, tokenAddress);\\n  }\\n\\n  /**\\n   * A function which lets the owner of the lock update the beneficiary account,\\n   * which receives funds on withdrawal.\\n   */\\n  function updateBeneficiary(\\n    address _beneficiary\\n  ) external\\n  {\\n    require(msg.sender == beneficiary || isLockManager(msg.sender), 'ONLY_BENEFICIARY_OR_LOCKMANAGER');\\n    require(_beneficiary != address(0), 'INVALID_ADDRESS');\\n    beneficiary = _beneficiary;\\n  }\\n\\n  /**\\n   * @notice Allows a lock manager to add or remove an event hook\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook\\n  ) external\\n    onlyLockManager()\\n  {\\n    require(_onKeyPurchaseHook == address(0) || _onKeyPurchaseHook.isContract(), 'INVALID_ON_KEY_SOLD_HOOK');\\n    require(_onKeyCancelHook == address(0) || _onKeyCancelHook.isContract(), 'INVALID_ON_KEY_CANCEL_HOOK');\\n    onKeyPurchaseHook = ILockKeyPurchaseHook(_onKeyPurchaseHook);\\n    onKeyCancelHook = ILockKeyCancelHook(_onKeyCancelHook);\\n  }\\n\\n  function totalSupply()\\n    public\\n    view returns(uint256)\\n  {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @notice An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\\n   */\\n  function approveBeneficiary(\\n    address _spender,\\n    uint _amount\\n  ) public\\n    onlyLockManagerOrBeneficiary\\n    returns (bool)\\n  {\\n    return IERC20(tokenAddress).approve(_spender, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x0aef6c3828eb28aac916b16b497d86540c0ddb31de44a001e7bddbc4fa7b7451\"},\"contracts/mixins/MixinLockManagerRole.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n// This contract mostly follows the pattern established by openzeppelin in\\n// openzeppelin/contracts-ethereum-package/contracts/access/roles\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol';\\n\\n\\ncontract MixinLockManagerRole {\\n  using Roles for Roles.Role;\\n\\n  event LockManagerAdded(address indexed account);\\n  event LockManagerRemoved(address indexed account);\\n\\n  Roles.Role private lockManagers;\\n\\n  function _initializeMixinLockManagerRole(address sender) internal {\\n    if (!isLockManager(sender)) {\\n      lockManagers.add(sender);\\n    }\\n  }\\n\\n  modifier onlyLockManager() {\\n    require(isLockManager(msg.sender), 'MixinLockManager: caller does not have the LockManager role');\\n    _;\\n  }\\n\\n  function isLockManager(address account) public view returns (bool) {\\n    return lockManagers.has(account);\\n  }\\n\\n  function addLockManager(address account) public onlyLockManager {\\n    lockManagers.add(account);\\n    emit LockManagerAdded(account);\\n  }\\n\\n  function renounceLockManager() public {\\n    lockManagers.remove(msg.sender);\\n    emit LockManagerRemoved(msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x386ee362b85a1a6da3c643d0bca8a5d73b55adb95651452e2c7d6bded4448dbc\"},\"contracts/mixins/MixinLockMetadata.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol';\\nimport '../UnlockUtils.sol';\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinLockManagerRole.sol';\\n\\n/**\\n * @title Mixin for metadata about the Lock.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinLockMetadata is\\n  IERC721Enumerable,\\n  ERC165,\\n  MixinLockManagerRole,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  using UnlockUtils for uint;\\n  using UnlockUtils for address;\\n  using UnlockUtils for string;\\n\\n  /// A descriptive name for a collection of NFTs in this contract.Defaults to \\\"Unlock-Protocol\\\" but is settable by lock owner\\n  string public name;\\n\\n  /// An abbreviated name for NFTs in this contract. Defaults to \\\"KEY\\\" but is settable by lock owner\\n  string private lockSymbol;\\n\\n  // the base Token URI for this Lock. If not set by lock owner, the global URI stored in Unlock is used.\\n  string private baseTokenURI;\\n\\n  event NewLockSymbol(\\n    string symbol\\n  );\\n\\n  function _initializeMixinLockMetadata(\\n    string memory _lockName\\n  ) internal\\n  {\\n    ERC165.initialize();\\n    name = _lockName;\\n    // registering the optional erc721 metadata interface with ERC165.sol using\\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\\n    _registerInterface(0x5b5e139f);\\n  }\\n\\n  /**\\n   * Allows the Lock owner to assign a descriptive name for this Lock.\\n   */\\n  function updateLockName(\\n    string calldata _lockName\\n  ) external\\n    onlyLockManager\\n  {\\n    name = _lockName;\\n  }\\n\\n  /**\\n   * Allows the Lock owner to assign a Symbol for this Lock.\\n   */\\n  function updateLockSymbol(\\n    string calldata _lockSymbol\\n  ) external\\n    onlyLockManager\\n  {\\n    lockSymbol = _lockSymbol;\\n    emit NewLockSymbol(_lockSymbol);\\n  }\\n\\n  /**\\n    * @dev Gets the token symbol\\n    * @return string representing the token name\\n    */\\n  function symbol()\\n    external view\\n    returns(string memory)\\n  {\\n    if(bytes(lockSymbol).length == 0) {\\n      return unlockProtocol.globalTokenSymbol();\\n    } else {\\n      return lockSymbol;\\n    }\\n  }\\n\\n  /**\\n   * Allows the Lock owner to update the baseTokenURI for this Lock.\\n   */\\n  function setBaseTokenURI(\\n    string calldata _baseTokenURI\\n  ) external\\n    onlyLockManager\\n  {\\n    baseTokenURI = _baseTokenURI;\\n  }\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @param _tokenId The iD of the token  for which we want to retrieve the URI.\\n   * If 0 is passed here, we just return the appropriate baseTokenURI.\\n   * If a custom URI has been set we don't return the lock address.\\n   * It may be included in the custom baseTokenURI if needed.\\n   * @dev  URIs are defined in RFC 3986. The URI may point to a JSON file\\n   * that conforms to the \\\"ERC721 Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    returns(string memory)\\n  {\\n    string memory URI;\\n    string memory tokenId;\\n    string memory lockAddress = address(this).address2Str();\\n    string memory seperator;\\n\\n    if(_tokenId != 0) {\\n      tokenId = _tokenId.uint2Str();\\n    } else {\\n      tokenId = '';\\n    }\\n\\n    if(bytes(baseTokenURI).length == 0) {\\n      URI = unlockProtocol.globalBaseTokenURI();\\n      seperator = '/';\\n    } else {\\n      URI = baseTokenURI;\\n      seperator = '';\\n      lockAddress = '';\\n    }\\n\\n    return URI.strConcat(\\n        lockAddress,\\n        seperator,\\n        tokenId\\n      );\\n  }\\n}\",\"keccak256\":\"0x5479e533b329565c1bcb6a07c335d854558d912c03021227dd2015fc0d840fad\"},\"contracts/mixins/MixinPurchase.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinDisable.sol';\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\nimport './MixinFunds.sol';\\n\\n\\n/**\\n * @title Mixin for the purchase-related functions.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinPurchase is\\n  MixinFunds,\\n  MixinDisable,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  using SafeMath for uint;\\n\\n  event RenewKeyPurchase(address indexed owner, uint newExpiration);\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _recipient address of the recipient of the purchased key\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  */\\n  function purchase(\\n    uint256 _value,\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable\\n    onlyIfAlive\\n    notSoldOut\\n  {\\n    require(_recipient != address(0), 'INVALID_ADDRESS');\\n\\n    // Assign the key\\n    Key storage toKey = keyByOwner[_recipient];\\n    uint idTo = toKey.tokenId;\\n    uint newTimeStamp;\\n\\n    if (idTo == 0) {\\n      // Assign a new tokenId (if a new owner or previously transferred)\\n      _assignNewTokenId(toKey);\\n      // refresh the cached value\\n      idTo = toKey.tokenId;\\n      _recordOwner(_recipient, idTo);\\n      newTimeStamp = block.timestamp + expirationDuration;\\n      toKey.expirationTimestamp = newTimeStamp;\\n\\n      // trigger event\\n      emit Transfer(\\n        address(0), // This is a creation.\\n        _recipient,\\n        idTo\\n      );\\n    } else if (toKey.expirationTimestamp > block.timestamp) {\\n      // This is an existing owner trying to extend their key\\n      newTimeStamp = toKey.expirationTimestamp.add(expirationDuration);\\n      toKey.expirationTimestamp = newTimeStamp;\\n      emit RenewKeyPurchase(_recipient, newTimeStamp);\\n    } else {\\n      // This is an existing owner trying to renew their expired key\\n      // SafeAdd is not required here since expirationDuration is capped to a tiny value\\n      // (relative to the size of a uint)\\n      newTimeStamp = block.timestamp + expirationDuration;\\n      toKey.expirationTimestamp = newTimeStamp;\\n\\n      // reset the key Manager to 0x00\\n      _setKeyManagerOf(idTo, address(0));\\n\\n      emit RenewKeyPurchase(_recipient, newTimeStamp);\\n    }\\n\\n    (uint inMemoryKeyPrice, uint discount, uint tokens) = _purchasePriceFor(_recipient, _referrer, _data);\\n    if (discount > 0)\\n    {\\n      unlockProtocol.recordConsumedDiscount(discount, tokens);\\n    }\\n\\n    // Record price without any tips\\n    unlockProtocol.recordKeyPurchase(inMemoryKeyPrice, getHasValidKey(_referrer) && _referrer != _recipient ? _referrer : address(0));\\n\\n    // We explicitly allow for greater amounts of ETH or tokens to allow 'donations'\\n    uint pricePaid;\\n    if(tokenAddress != address(0))\\n    {\\n      pricePaid = _value;\\n      IERC20 token = IERC20(tokenAddress);\\n      token.safeTransferFrom(msg.sender, address(this), _value);\\n    }\\n    else\\n    {\\n      pricePaid = msg.value;\\n    }\\n    require(pricePaid >= inMemoryKeyPrice, 'INSUFFICIENT_VALUE');\\n\\n    if(address(onKeyPurchaseHook) != address(0))\\n    {\\n      onKeyPurchaseHook.onKeyPurchase(msg.sender, _recipient, _referrer, _data, inMemoryKeyPrice, pricePaid);\\n    }\\n  }\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint minKeyPrice)\\n  {\\n    (minKeyPrice, , ) = _purchasePriceFor(_recipient, _referrer, _data);\\n  }\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\\n   * unlockDiscount and unlockTokens are the values returned from `computeAvailableDiscountFor`\\n   */\\n  function _purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes memory _data\\n  ) internal view\\n    returns (uint minKeyPrice, uint unlockDiscount, uint unlockTokens)\\n  {\\n    if(address(onKeyPurchaseHook) != address(0))\\n    {\\n      minKeyPrice = onKeyPurchaseHook.keyPurchasePrice(msg.sender, _recipient, _referrer, _data);\\n    }\\n    else\\n    {\\n      minKeyPrice = keyPrice;\\n    }\\n\\n    if(minKeyPrice > 0)\\n    {\\n      (unlockDiscount, unlockTokens) = unlockProtocol.computeAvailableDiscountFor(_recipient, minKeyPrice);\\n      require(unlockDiscount <= minKeyPrice, 'INVALID_DISCOUNT_FROM_UNLOCK');\\n      minKeyPrice -= unlockDiscount;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe301387d60993db6524044a0f5478c797c48cdc0f007993dd8ddf28159ad9b2c\"},\"contracts/mixins/MixinRefunds.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\nimport './MixinSignatures.sol';\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinLockManagerRole.sol';\\nimport './MixinFunds.sol';\\n\\n\\ncontract MixinRefunds is\\n  MixinLockManagerRole,\\n  MixinSignatures,\\n  MixinFunds,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  using SafeMath for uint;\\n\\n  // CancelAndRefund will return funds based on time remaining minus this penalty.\\n  // This is calculated as `proRatedRefund * refundPenaltyBasisPoints / BASIS_POINTS_DEN`.\\n  uint public refundPenaltyBasisPoints;\\n\\n  uint public freeTrialLength;\\n\\n  /// @notice The typehash per the EIP-712 standard\\n  /// @dev This can be computed in JS instead of read from the contract\\n  bytes32 private constant CANCEL_TYPEHASH = keccak256('cancelAndRefundFor(address _keyOwner)');\\n\\n  event CancelKey(\\n    uint indexed tokenId,\\n    address indexed owner,\\n    address indexed sendTo,\\n    uint refund\\n  );\\n\\n  event RefundPenaltyChanged(\\n    uint freeTrialLength,\\n    uint refundPenaltyBasisPoints\\n  );\\n\\n  function _initializeMixinRefunds() internal\\n  {\\n    // default to 10%\\n    refundPenaltyBasisPoints = 1000;\\n  }\\n\\n  /**\\n   * @dev Invoked by the lock owner to destroy the user's ket and perform a refund and cancellation\\n   * of the key\\n   */\\n  function expireAndRefundFor(\\n    address _keyOwner,\\n    uint amount\\n  ) external\\n    onlyLockManager\\n    hasValidKey(_keyOwner)\\n  {\\n    _cancelAndRefund(_keyOwner, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys the key and sends a refund based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId)\\n    external\\n    onlyKeyManagerOrApproved(_tokenId)\\n  {\\n    address keyOwner = ownerOf(_tokenId);\\n    uint refund = _getCancelAndRefundValue(keyOwner);\\n\\n    _cancelAndRefund(keyOwner, refund);\\n  }\\n\\n  /**\\n   * @dev Cancels a key managed by a different user and sends the funds to the msg.sender.\\n   * @param _keyManager the key managed by this user will be canceled\\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyOwner\\n   * @param _tokenId The key to cancel\\n   */\\n  function cancelAndRefundFor(\\n    address _keyManager,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint _tokenId\\n  ) external\\n    consumeOffchainApproval(\\n      getCancelAndRefundApprovalHash(_keyManager, msg.sender),\\n      _keyManager,\\n      _v,\\n      _r,\\n      _s\\n    )\\n  {\\n    address keyOwner = ownerOf(_tokenId);\\n    uint refund = _getCancelAndRefundValue(keyOwner);\\n    _cancelAndRefund(keyOwner, refund);\\n  }\\n\\n  /**\\n   * Allow the owner to change the refund penalty.\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external\\n    onlyLockManager\\n  {\\n    emit RefundPenaltyChanged(\\n      _freeTrialLength,\\n      _refundPenaltyBasisPoints\\n    );\\n\\n    freeTrialLength = _freeTrialLength;\\n    refundPenaltyBasisPoints = _refundPenaltyBasisPoints;\\n  }\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * a cancelAndRefund block.timestamp.\\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   */\\n  function getCancelAndRefundValueFor(\\n    address _keyOwner\\n  )\\n    external view\\n    returns (uint refund)\\n  {\\n    return _getCancelAndRefundValue(_keyOwner);\\n  }\\n\\n  /**\\n   * @notice returns the hash to sign in order to allow another user to cancel on your behalf.\\n   * @dev this can be computed in JS instead of read from the contract.\\n   * @param _keyManager The key manager's address (also the message signer)\\n   * @param _txSender The address cancelling cancel on behalf of the keyOwner\\n   * @return approvalHash The hash to sign\\n   */\\n  function getCancelAndRefundApprovalHash(\\n    address _keyManager,\\n    address _txSender\\n  ) public view\\n    returns (bytes32 approvalHash)\\n  {\\n    return keccak256(\\n      abi.encodePacked(\\n        // Approval is specific to this Lock\\n        address(this),\\n        // The specific function the signer is approving\\n        CANCEL_TYPEHASH,\\n        // Approval enables only one cancel call\\n        keyManagerToNonce[_keyManager],\\n        // Approval allows only one account to broadcast the tx\\n        _txSender\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @dev cancels the key for the given keyOwner and sends the refund to the msg.sender.\\n   */\\n  function _cancelAndRefund(\\n    address _keyOwner,\\n    uint refund\\n  ) internal\\n  {\\n    Key storage key = keyByOwner[_keyOwner];\\n\\n    emit CancelKey(key.tokenId, _keyOwner, msg.sender, refund);\\n    // expirationTimestamp is a proxy for hasKey, setting this to `block.timestamp` instead\\n    // of 0 so that we can still differentiate hasKey from hasValidKey.\\n    key.expirationTimestamp = block.timestamp;\\n\\n    if (refund > 0) {\\n      // Security: doing this last to avoid re-entrancy concerns\\n      _transfer(tokenAddress, _keyOwner, refund);\\n    }\\n\\n    // inform the hook if there is one registered\\n    if(address(onKeyCancelHook) != address(0))\\n    {\\n      onKeyCancelHook.onKeyCancel(msg.sender, _keyOwner, refund);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * a cancelAndRefund now.\\n   * @param _keyOwner The owner of the key check the refund value for.\\n   */\\n  function _getCancelAndRefundValue(\\n    address _keyOwner\\n  )\\n    private view\\n    hasValidKey(_keyOwner)\\n    returns (uint refund)\\n  {\\n    Key storage key = keyByOwner[_keyOwner];\\n    // Math: safeSub is not required since `hasValidKey` confirms timeRemaining is positive\\n    uint timeRemaining = key.expirationTimestamp - block.timestamp;\\n    if(timeRemaining + freeTrialLength >= expirationDuration) {\\n      refund = keyPrice;\\n    } else {\\n      // Math: using safeMul in case keyPrice or timeRemaining is very large\\n      refund = keyPrice.mul(timeRemaining) / expirationDuration;\\n    }\\n\\n    // Apply the penalty if this is not a free trial\\n    if(freeTrialLength == 0 || timeRemaining + freeTrialLength < expirationDuration)\\n    {\\n      uint penalty = keyPrice.mul(refundPenaltyBasisPoints) / BASIS_POINTS_DEN;\\n      if (refund > penalty) {\\n        // Math: safeSub is not required since the if confirms this won't underflow\\n        refund -= penalty;\\n      } else {\\n        refund = 0;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x777f48ddb2e1014c0e9dee0e65932cdf2b3a2fe19f83374603507b08b49fa85e\"},\"contracts/mixins/MixinSignatures.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol';\\n\\n\\ncontract MixinSignatures\\n{\\n  /// @notice emits anytime the nonce used for off-chain approvals changes.\\n  event NonceChanged(\\n    address indexed keyManager,\\n    uint nextAvailableNonce\\n  );\\n\\n  // Stores a nonce per user to use for signed messages\\n  mapping(address => uint) public keyManagerToNonce;\\n\\n  /// @notice Validates an off-chain approval signature.\\n  /// @dev If valid the nonce is consumed, else revert.\\n  modifier consumeOffchainApproval(\\n    bytes32 _hash,\\n    address _keyManager,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  )\\n  {\\n    require(\\n      ecrecover(\\n        ECDSA.toEthSignedMessageHash(_hash),\\n        _v,\\n        _r,\\n        _s\\n      ) == _keyManager, 'INVALID_SIGNATURE'\\n    );\\n    keyManagerToNonce[_keyManager]++;\\n    emit NonceChanged(_keyManager, keyManagerToNonce[_keyManager]);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets the minimum nonce for a valid off-chain approval message from the\\n   * senders account.\\n   * @dev This can be used to invalidate a previously signed message.\\n   */\\n  function invalidateOffchainApproval(\\n    uint _nextAvailableNonce\\n  ) external\\n  {\\n    require(_nextAvailableNonce > keyManagerToNonce[msg.sender], 'NONCE_ALREADY_USED');\\n    keyManagerToNonce[msg.sender] = _nextAvailableNonce;\\n    emit NonceChanged(msg.sender, _nextAvailableNonce);\\n  }\\n}\",\"keccak256\":\"0xcd9010b7903cf80376ad4453ef3d39763eea22e988f6f480071d0cca3c647f82\"},\"contracts/mixins/MixinTransfer.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport './MixinLockManagerRole.sol';\\nimport './MixinDisable.sol';\\nimport './MixinKeys.sol';\\nimport './MixinFunds.sol';\\nimport './MixinLockCore.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\n\\n/**\\n * @title Mixin for the transfer-related functions needed to meet the ERC721\\n * standard.\\n * @author Nick Furfaro\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\n\\ncontract MixinTransfer is\\n  MixinLockManagerRole,\\n  MixinFunds,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  using SafeMath for uint;\\n  using Address for address;\\n\\n  event TransferFeeChanged(\\n    uint transferFeeBasisPoints\\n  );\\n\\n  // 0x150b7a02 == bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // The fee relative to keyPrice to charge when transfering a Key to another account\\n  // (potentially on a 0x marketplace).\\n  // This is calculated as `keyPrice * transferFeeBasisPoints / BASIS_POINTS_DEN`.\\n  uint public transferFeeBasisPoints;\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) public\\n    onlyIfAlive\\n    onlyKeyManagerOrApproved(_tokenId)\\n  {\\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\\n    require(_to != address(0), 'INVALID_ADDRESS');\\n    address keyOwner = _ownerOf[_tokenId];\\n    require(getHasValidKey(keyOwner), 'KEY_NOT_VALID');\\n    Key storage fromKey = keyByOwner[keyOwner];\\n    Key storage toKey = keyByOwner[_to];\\n    uint idTo = toKey.tokenId;\\n    uint time;\\n    // get the remaining time for the origin key\\n    uint timeRemaining = fromKey.expirationTimestamp - block.timestamp;\\n    // get the transfer fee based on amount of time wanted share\\n    uint fee = getTransferFee(keyOwner, _timeShared);\\n    uint timePlusFee = _timeShared.add(fee);\\n\\n    // ensure that we don't try to share too much\\n    if(timePlusFee < timeRemaining) {\\n      // now we can safely set the time\\n      time = _timeShared;\\n      // deduct time from parent key, including transfer fee\\n      _timeMachine(_tokenId, timePlusFee, false);\\n    } else {\\n      // we have to recalculate the fee here\\n      fee = getTransferFee(keyOwner, timeRemaining);\\n      time = timeRemaining - fee;\\n      fromKey.expirationTimestamp = block.timestamp; // Effectively expiring the key\\n      emit ExpireKey(_tokenId);\\n    }\\n\\n    if (idTo == 0) {\\n      _assignNewTokenId(toKey);\\n      idTo = toKey.tokenId;\\n      _recordOwner(_to, idTo);\\n      emit Transfer(\\n        address(0), // This is a creation or time-sharing\\n        _to,\\n        idTo\\n      );\\n    } else if (toKey.expirationTimestamp <= block.timestamp) {\\n      // reset the key Manager for expired keys\\n      _setKeyManagerOf(idTo, address(0));\\n    }\\n\\n    // add time to new key\\n    _timeMachine(idTo, time, true);\\n    // trigger event\\n    emit Transfer(\\n      keyOwner,\\n      _to,\\n      idTo\\n    );\\n\\n    require(_checkOnERC721Received(keyOwner, _to, _tokenId, ''), 'NON_COMPLIANT_ERC721_RECEIVER');\\n  }\\n\\n  function transferFrom(\\n    address _from,\\n    address _recipient,\\n    uint _tokenId\\n  )\\n    public\\n    onlyIfAlive\\n    hasValidKey(_from)\\n    onlyKeyManagerOrApproved(_tokenId)\\n  {\\n    require(isKeyOwner(_tokenId, _from), 'TRANSFER_FROM: NOT_KEY_OWNER');\\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\\n    require(_recipient != address(0), 'INVALID_ADDRESS');\\n    uint fee = getTransferFee(_from, 0);\\n\\n    Key storage fromKey = keyByOwner[_from];\\n    Key storage toKey = keyByOwner[_recipient];\\n\\n    uint previousExpiration = toKey.expirationTimestamp;\\n    // subtract the fee from the senders key before the transfer\\n    _timeMachine(_tokenId, fee, false);\\n\\n    if (toKey.tokenId == 0) {\\n      toKey.tokenId = _tokenId;\\n      _recordOwner(_recipient, _tokenId);\\n      // Clear any previous approvals\\n      _clearApproval(_tokenId);\\n    }\\n\\n    if (previousExpiration <= block.timestamp) {\\n      // The recipient did not have a key, or had a key but it expired. The new expiration is the sender's key expiration\\n      // An expired key is no longer a valid key, so the new tokenID is the sender's tokenID\\n      toKey.expirationTimestamp = fromKey.expirationTimestamp;\\n      toKey.tokenId = _tokenId;\\n\\n      // Reset the key Manager to the key owner\\n      _setKeyManagerOf(_tokenId, address(0));\\n\\n      _recordOwner(_recipient, _tokenId);\\n    } else {\\n      // The recipient has a non expired key. We just add them the corresponding remaining time\\n      // SafeSub is not required since the if confirms `previousExpiration - block.timestamp` cannot underflow\\n      toKey.expirationTimestamp = fromKey\\n        .expirationTimestamp.add(previousExpiration - block.timestamp);\\n    }\\n\\n    // Effectively expiring the key for the previous owner\\n    fromKey.expirationTimestamp = block.timestamp;\\n\\n    // Set the tokenID to 0 for the previous owner to avoid duplicates\\n    fromKey.tokenId = 0;\\n\\n    // trigger event\\n    emit Transfer(\\n      _from,\\n      _recipient,\\n      _tokenId\\n    );\\n  }\\n\\n  /**\\n   * @notice An ERC-20 style transfer.\\n   * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n   * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n   * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n   */\\n  function transfer(\\n    address _to,\\n    uint _value\\n  ) public\\n    returns (bool success)\\n  {\\n    uint maxTimeToSend = _value * expirationDuration;\\n    Key storage fromKey = keyByOwner[msg.sender];\\n    uint timeRemaining = fromKey.expirationTimestamp.sub(block.timestamp);\\n    if(maxTimeToSend < timeRemaining)\\n    {\\n      shareKey(_to, fromKey.tokenId, maxTimeToSend);\\n    }\\n    else\\n    {\\n      transferFrom(msg.sender, _to, fromKey.tokenId);\\n    }\\n\\n    // Errors will cause a revert\\n    return true;\\n  }\\n\\n  /**\\n  * @notice Transfers the ownership of an NFT from one address to another address\\n  * @dev This works identically to the other function with an extra data parameter,\\n  *  except this function just sets data to ''\\n  * @param _from The current owner of the NFT\\n  * @param _to The new owner\\n  * @param _tokenId The NFT to transfer\\n  */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId\\n  )\\n    public\\n  {\\n    safeTransferFrom(_from, _to, _tokenId, '');\\n  }\\n\\n  /**\\n  * @notice Transfers the ownership of an NFT from one address to another address.\\n  * When transfer is complete, this functions\\n  *  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  *  `onERC721Received` on `_to` and throws if the return value is not\\n  *  `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @param _from The current owner of the NFT\\n  * @param _to The new owner\\n  * @param _tokenId The NFT to transfer\\n  * @param _data Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId,\\n    bytes memory _data\\n  )\\n    public\\n  {\\n    transferFrom(_from, _to, _tokenId);\\n    require(_checkOnERC721Received(_from, _to, _tokenId, _data), 'NON_COMPLIANT_ERC721_RECEIVER');\\n\\n  }\\n\\n  /**\\n   * Allow the Lock owner to change the transfer fee.\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  )\\n    external\\n    onlyLockManager\\n  {\\n    emit TransferFeeChanged(\\n      _transferFeeBasisPoints\\n    );\\n    transferFeeBasisPoints = _transferFeeBasisPoints;\\n  }\\n\\n  /**\\n   * Determines how much of a fee a key owner would need to pay in order to\\n   * transfer the key to another account.  This is pro-rated so the fee goes down\\n   * overtime.\\n   * @param _keyOwner The owner of the key check the transfer fee for.\\n   */\\n  function getTransferFee(\\n    address _keyOwner,\\n    uint _time\\n  )\\n    public view\\n    returns (uint)\\n  {\\n    if(! getHasValidKey(_keyOwner)) {\\n      return 0;\\n    } else {\\n      Key storage key = keyByOwner[_keyOwner];\\n      uint timeToTransfer;\\n      uint fee;\\n      // Math: safeSub is not required since `hasValidKey` confirms timeToTransfer is positive\\n      // this is for standard key transfers\\n      if(_time == 0) {\\n        timeToTransfer = key.expirationTimestamp - block.timestamp;\\n      } else {\\n        timeToTransfer = _time;\\n      }\\n      fee = timeToTransfer.mul(transferFeeBasisPoints) / BASIS_POINTS_DEN;\\n      return fee;\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke `onERC721Received` on a target address\\n   * The call is not executed if the target address is not a contract\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  )\\n    internal\\n    returns (bool)\\n  {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\\n      msg.sender, from, tokenId, _data);\\n    return (retval == _ERC721_RECEIVED);\\n  }\\n\\n}\",\"keccak256\":\"0x494b12c850c1860fe1df255d9e2efceddba469284dbf4d0fee528080b1e8a0f7\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615b5a80620000216000396000f3fe6080604052600436106104105760003560e01c806370a082311161021e578063abdf82ce11610123578063d2503485116100ab578063f0ba60401161007a578063f0ba604014611405578063f12c6b6e1461141a578063f3fef3a314611459578063fc42b58f14611492578063fe72e4c1146114cb57610410565b8063d250348514611332578063d32bfb6c14611365578063d4fac45d1461138f578063e985e9c5146113ca57610410565b8063b585a6d5116100f2578063b585a6d5146111d4578063b88d4fde1461120d578063c1c98d03146112de578063c87b56dd146112f3578063d1bbd49c1461131d57610410565b8063abdf82ce146110df578063ad0e0a4d14611112578063b11d7ec11461114d578063b2e0f6e71461118657610410565b8063970aaeb7116101a6578063a22cb46511610175578063a22cb46514610fea578063a2e4cd2e14611025578063a375cb051461105e578063a9059cbb14611073578063aae4b8f7146110ac57610410565b8063970aaeb714610f3057806397aa390a14610f63578063994a8a7114610f9c5780639d76ea5814610fd557610410565b806381a3c943116101ed57806381a3c94314610d865780638577a6d514610ea15780638d0361fc14610ecb57806393fd184414610f0657806395d89b4114610f1b57610410565b806370a0823114610cae57806374b6c10614610ce1578063782a4ade14610cf65780638129fc1c14610d7157610410565b80632f745c59116103245780634f6ccce7116102ac578063564aa99d1161027b578063564aa99d14610b2d57806356e0d51f14610b605780636352211e14610b755780636d8ea5b414610b9f5780636eadde4314610bd257610410565b80634f6ccce714610a2257806352b0f63814610a4c57806352d6a8e414610a7f578063550ef3a814610ab257610410565b806339f46986116102f357806339f46986146108e25780633f33133a146109125780634136aa35146109a057806342842e0e146109b55780634d025fed146109f857610410565b80632f745c59146107ef57806330176e131461082857806335576ad0146108a357806338af3eed146108cd57610410565b806310803b72116103a7578063183767da11610376578063183767da1461073a578063217751bc1461074f57806323b872dd146107645780632af9162a146107a75780632d33dd5b146107da57610410565b806310803b721461067b57806310e56973146106fb57806311a4c03a1461071057806318160ddd1461072557610410565b8063095ea7b3116103e3578063095ea7b314610554578063097ba3331461058d5780630aaffd2a146106335780630f15023b1461066657610410565b806301ffc9a714610412578063025e7c271461045a57806306fdde03146104a0578063081812fc1461052a575b005b34801561041e57600080fd5b506104466004803603602081101561043557600080fd5b50356001600160e01b0319166114fe565b604080519115158252519081900360200190f35b34801561046657600080fd5b506104846004803603602081101561047d57600080fd5b5035611521565b604080516001600160a01b039092168252519081900360200190f35b3480156104ac57600080fd5b506104b5611548565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104ef5781810151838201526020016104d7565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053657600080fd5b506104846004803603602081101561054d57600080fd5b50356115d6565b34801561056057600080fd5b506104106004803603604081101561057757600080fd5b506001600160a01b03813516906020013561164c565b34801561059957600080fd5b50610621600480360360608110156105b057600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156105e357600080fd5b8201836020820111156105f557600080fd5b803590602001918460018302840111600160201b8311171561061657600080fd5b5090925090506117d3565b60408051918252519081900360200190f35b34801561063f57600080fd5b506104106004803603602081101561065657600080fd5b50356001600160a01b0316611822565b34801561067257600080fd5b506104846118ff565b34801561068757600080fd5b506106ab6004803603604081101561069e57600080fd5b508035906020013561190e565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106e75781810151838201526020016106cf565b505050509050019250505060405180910390f35b34801561070757600080fd5b506106216119de565b34801561071c57600080fd5b506106216119e4565b34801561073157600080fd5b506106216119ea565b34801561074657600080fd5b506106216119f1565b34801561075b57600080fd5b506104846119f7565b34801561077057600080fd5b506104106004803603606081101561078757600080fd5b506001600160a01b03813581169160208101359091169060400135611a06565b3480156107b357600080fd5b50610410600480360360208110156107ca57600080fd5b50356001600160a01b0316611d05565b3480156107e657600080fd5b50610484611d91565b3480156107fb57600080fd5b506106216004803603604081101561081257600080fd5b506001600160a01b038135169060200135611da0565b34801561083457600080fd5b506104106004803603602081101561084b57600080fd5b810190602081018135600160201b81111561086557600080fd5b82018360208201111561087757600080fd5b803590602001918460018302840111600160201b8311171561089857600080fd5b509092509050611dfe565b3480156108af57600080fd5b50610410600480360360208110156108c657600080fd5b5035611e53565b3480156108d957600080fd5b50610484611ef5565b3480156108ee57600080fd5b506104106004803603604081101561090557600080fd5b5080359060200135611f04565b6104106004803603608081101561092857600080fd5b8135916001600160a01b03602082013581169260408301359091169190810190608081016060820135600160201b81111561096257600080fd5b82018360208201111561097457600080fd5b803590602001918460018302840111600160201b8311171561099557600080fd5b509092509050611f8e565b3480156109ac57600080fd5b506104466124be565b3480156109c157600080fd5b50610410600480360360608110156109d857600080fd5b506001600160a01b038135811691602081013590911690604001356124ce565b348015610a0457600080fd5b5061048460048036036020811015610a1b57600080fd5b50356124e9565b348015610a2e57600080fd5b5061062160048036036020811015610a4557600080fd5b5035612504565b348015610a5857600080fd5b5061044660048036036020811015610a6f57600080fd5b50356001600160a01b031661254f565b348015610a8b57600080fd5b5061062160048036036020811015610aa257600080fd5b50356001600160a01b0316612562565b348015610abe57600080fd5b5061041060048036036020811015610ad557600080fd5b810190602081018135600160201b811115610aef57600080fd5b820183602082011115610b0157600080fd5b803590602001918460018302840111600160201b83111715610b2257600080fd5b50909250905061256d565b348015610b3957600080fd5b5061041060048036036020811015610b5057600080fd5b50356001600160a01b03166125bd565b348015610b6c57600080fd5b50610621612649565b348015610b8157600080fd5b5061048460048036036020811015610b9857600080fd5b503561264f565b348015610bab57600080fd5b5061044660048036036020811015610bc257600080fd5b50356001600160a01b031661266a565b348015610bde57600080fd5b50610410600480360360c0811015610bf557600080fd5b6001600160a01b03823581169260208101359260408201359092169160608201359160808101359181019060c0810160a0820135600160201b811115610c3a57600080fd5b820183602082011115610c4c57600080fd5b803590602001918460018302840111600160201b83111715610c6d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061268a945050505050565b348015610cba57600080fd5b5061062160048036036020811015610cd157600080fd5b50356001600160a01b031661278a565b348015610ced57600080fd5b506106216127f9565b348015610d0257600080fd5b5061041060048036036020811015610d1957600080fd5b810190602081018135600160201b811115610d3357600080fd5b820183602082011115610d4557600080fd5b803590602001918460018302840111600160201b83111715610d6657600080fd5b5090925090506127ff565b348015610d7d57600080fd5b506104106128b4565b348015610d9257600080fd5b5061041060048036036060811015610da957600080fd5b810190602081018135600160201b811115610dc357600080fd5b820183602082011115610dd557600080fd5b803590602001918460208302840111600160201b83111715610df657600080fd5b919390929091602081019035600160201b811115610e1357600080fd5b820183602082011115610e2557600080fd5b803590602001918460208302840111600160201b83111715610e4657600080fd5b919390929091602081019035600160201b811115610e6357600080fd5b820183602082011115610e7557600080fd5b803590602001918460208302840111600160201b83111715610e9657600080fd5b509092509050612966565b348015610ead57600080fd5b5061041060048036036020811015610ec457600080fd5b5035612b73565b348015610ed757600080fd5b5061062160048036036040811015610eee57600080fd5b506001600160a01b0381358116916020013516612bef565b348015610f1257600080fd5b50610621612c7a565b348015610f2757600080fd5b506104b5612c80565b348015610f3c57600080fd5b5061062160048036036020811015610f5357600080fd5b50356001600160a01b0316612e6f565b348015610f6f57600080fd5b5061041060048036036040811015610f8657600080fd5b506001600160a01b038135169060200135612e8a565b348015610fa857600080fd5b5061044660048036036040811015610fbf57600080fd5b50803590602001356001600160a01b0316612f23565b348015610fe157600080fd5b50610484612f44565b348015610ff657600080fd5b506104106004803603604081101561100d57600080fd5b506001600160a01b0381351690602001351515612f53565b34801561103157600080fd5b506104106004803603604081101561104857600080fd5b50803590602001356001600160a01b031661305e565b34801561106a57600080fd5b5061062161322d565b34801561107f57600080fd5b506104466004803603604081101561109657600080fd5b506001600160a01b038135169060200135613233565b3480156110b857600080fd5b50610446600480360360208110156110cf57600080fd5b50356001600160a01b031661329a565b3480156110eb57600080fd5b506106216004803603602081101561110257600080fd5b50356001600160a01b03166132ad565b34801561111e57600080fd5b506104106004803603604081101561113557600080fd5b506001600160a01b03813581169160200135166132cb565b34801561115957600080fd5b506104106004803603604081101561117057600080fd5b50803590602001356001600160a01b0316613425565b34801561119257600080fd5b50610410600480360360a08110156111a957600080fd5b506001600160a01b038135169060ff60208201351690604081013590606081013590608001356134f2565b3480156111e057600080fd5b50610446600480360360408110156111f757600080fd5b506001600160a01b038135169060200135613642565b34801561121957600080fd5b506104106004803603608081101561123057600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561126a57600080fd5b82018360208201111561127c57600080fd5b803590602001918460018302840111600160201b8311171561129d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061373c945050505050565b3480156112ea57600080fd5b506104106137aa565b3480156112ff57600080fd5b506104b56004803603602081101561131657600080fd5b5035613876565b34801561132957600080fd5b50610621613af0565b34801561133e57600080fd5b506104106004803603602081101561135557600080fd5b50356001600160a01b0316613af5565b34801561137157600080fd5b506104106004803603602081101561138857600080fd5b5035613b81565b34801561139b57600080fd5b50610621600480360360408110156113b257600080fd5b506001600160a01b0381358116916020013516613c27565b3480156113d657600080fd5b50610446600480360360408110156113ed57600080fd5b506001600160a01b0381358116916020013516613cd1565b34801561141157600080fd5b50610410613d66565b34801561142657600080fd5b506104106004803603606081101561143d57600080fd5b506001600160a01b038135169060208101359060400135613da4565b34801561146557600080fd5b506104106004803603604081101561147c57600080fd5b506001600160a01b03813516906020013561412a565b34801561149e57600080fd5b50610621600480360360408110156114b557600080fd5b506001600160a01b03813516906020013561426b565b3480156114d757600080fd5b50610621600480360360208110156114ee57600080fd5b50356001600160a01b03166142de565b6001600160e01b0319811660009081526033602052604090205460ff165b919050565b6074818154811061152e57fe5b6000918252602090912001546001600160a01b0316905081565b6078805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156115ce5780601f106115a3576101008083540402835291602001916115ce565b820191906000526020600020905b8154815290600101906020018083116115b157829003601f168201915b505050505081565b60008181526073602052604081205482906001600160a01b031661162f576040805162461bcd60e51b815260206004820152600b60248201526a4e4f5f535543485f4b455960a81b604482015290519081900360640190fd5b50506000908152607660205260409020546001600160a01b031690565b606954600160a01b900460ff1661169c576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b806116a781336142f0565b806116b757506116b78133614352565b806116df57506000818152607360205260409020546116df906001600160a01b031633613cd1565b61171e576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b336001600160a01b038416141561176b576040805162461bcd60e51b815260206004820152600c60248201526b20a8282927ab22afa9a2a62360a11b604482015290519081900360640190fd5b600082815260766020908152604080832080546001600160a01b0319166001600160a01b038881169182179092556073909352818420549151869492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611816858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061437392505050565b50909695505050505050565b606f546001600160a01b031633148061183f575061183f3361329a565b611890576040805162461bcd60e51b815260206004820152601f60248201527f4f4e4c595f42454e45464943494152595f4f525f4c4f434b4d414e4147455200604482015290519081900360640190fd5b6001600160a01b0381166118dd576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b606a546001600160a01b031681565b607454606090829084820290600090828401111561193457506074548181039250611939565b508082015b606083604051908082528060200260200182016040528015611965578160200160208202803883390190505b5090506000835b838110156119cf576074818154811061198157fe5b9060005260206000200160009054906101000a90046001600160a01b03168383815181106119ab57fe5b6001600160a01b03909216602092830291909101909101526001918201910161196c565b50909450505050505b92915050565b606c5481565b606b5481565b606e545b90565b607b5481565b6071546001600160a01b031681565b606954600160a01b900460ff16611a56576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b82611a608161266a565b611aa1576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b81611aac81336142f0565b80611abc5750611abc8133614352565b80611ae45750600081815260736020526040902054611ae4906001600160a01b031633613cd1565b611b23576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b611b2d8386612f23565b611b7e576040805162461bcd60e51b815260206004820152601c60248201527f5452414e534645525f46524f4d3a204e4f545f4b45595f4f574e455200000000604482015290519081900360640190fd5b612710607b5410611bcf576040805162461bcd60e51b815260206004820152601660248201527512d15657d514905394d1915494d7d11254d05093115160521b604482015290519081900360640190fd5b6001600160a01b038416611c1c576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6000611c2986600061426b565b6001600160a01b03808816600090815260726020526040808220928916825281206001810154939450919290611c62908890869061457f565b8154611c7e57868255611c7588886146a1565b611c7e87614729565b428111611cac5760018084015490830155868255611c9d876000614764565b611ca788886146a1565b611cc9565b6001830154611cc39042830363ffffffff6147e616565b60018301555b426001840155600080845560405188916001600160a01b03808c1692908d1691600080516020615adc83398151915291a4505050505050505050565b611d0e3361329a565b611d495760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611d5a60678263ffffffff61484016565b6040516001600160a01b038216907f766f6199fea59554b9ff688e413302b9200f85d74811c053c12d945ac6d8dd7a90600090a250565b6070546001600160a01b031681565b60008115611dee576040805162461bcd60e51b815260206004820152601660248201527527a7262cafa7a722afa5a2acafa822a92fa7aba722a960511b604482015290519081900360640190fd5b611df783612e6f565b9392505050565b611e073361329a565b611e425760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611e4e607a8383615845565b505050565b336000908152606860205260409020548111611eab576040805162461bcd60e51b81526020600482015260126024820152711393d390d157d053149150511657d554d15160721b604482015290519081900360640190fd5b33600081815260686020908152604091829020849055815184815291517ff5d035b703f1ad8d403dd02e821d04257acafc5f6c5d70a3907bd8abf33a2e0f9281900390910190a250565b606f546001600160a01b031681565b611f0d3361329a565b611f485760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b604080518381526020810183905281517fd6867bc538320e67d7bdc35860c27c08486eb490b4fd9b820fff18fb28381d3c929181900390910190a1607d91909155607c55565b606954600160a01b900460ff16611fde576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b606e54606d5411612026576040805162461bcd60e51b815260206004820152600d60248201526c1313d0d2d7d4d3d31117d3d555609a1b604482015290519081900360640190fd5b6001600160a01b038416612073576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6001600160a01b038416600090815260726020526040812080549091816120e35761209d836148a7565b825491506120ab87836146a1565b50606b5442016001830181905560405182906001600160a01b03891690600090600080516020615adc833981519152908290a46121ab565b428360010154111561215357606b5460018401546121069163ffffffff6147e616565b600184018190556040805182815290519192506001600160a01b038916917f872bd7c99ad5e7b6ed7f0a890f348839cb8e225c9deaa3909afedae54c93d17d9181900360200190a26121ab565b50606b5442016001830181905561216b826000614764565b6040805182815290516001600160a01b038916917f872bd7c99ad5e7b6ed7f0a890f348839cb8e225c9deaa3909afedae54c93d17d919081900360200190a25b60008060006121f18a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061437392505050565b91945092509050811561226b57606a5460408051633652466360e01b8152600481018590526024810184905290516001600160a01b039092169163365246639160448082019260009290919082900301818387803b15801561225257600080fd5b505af1158015612266573d6000803e3d6000fd5b505050505b606a546001600160a01b031663939d9f1f846122868c61266a565b80156122a457508c6001600160a01b03168c6001600160a01b031614155b6122af5760006122b1565b8b5b6040518363ffffffff1660e01b815260040180838152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b15801561230057600080fd5b505af1158015612314573d6000803e3d6000fd5b5050606954600092506001600160a01b031615905061235457506069548b906001600160a01b031661234e8133308563ffffffff6148bc16565b50612357565b50345b838110156123a1576040805162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f56414c554560701b604482015290519081900360640190fd5b6070546001600160a01b0316156124b057607060009054906101000a90046001600160a01b03166001600160a01b03166398499657338d8d8d8d8a886040518863ffffffff1660e01b815260040180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001806020018481526020018381526020018281038252868682818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b505050505b505050505050505050505050565b606954600160a01b900460ff1681565b611e4e8383836040518060200160405280600081525061373c565b6075602052600090815260409020546001600160a01b031681565b6000606e54821061254b576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b604482015290519081900360640190fd5b5090565b60006119d860678363ffffffff61491616565b60006119d88261497d565b6125763361329a565b6125b15760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611e4e60788383615845565b6125c63361329a565b6126015760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b61261260678263ffffffff614a8416565b6040516001600160a01b038216907f684f8a71407db0c334454ebe9c9b288549317893a20b10dc779ec5c118dcd12190600090a250565b607c5481565b6000908152607360205260409020546001600160a01b031690565b6001600160a01b0316600090815260726020526040902060010154421090565b600054610100900460ff16806126a357506126a3614b05565b806126b1575060005460ff16155b6126ec5760405162461bcd60e51b815260040180806020018281038252602e815260200180615aae602e913960400191505060405180910390fd5b600054610100900460ff16158015612717576000805460ff1961ff0019909116610100171660011790555b61272085614b0b565b612728614bda565b61273487878686614bef565b61273d82614c85565b612745614cb1565b61274d614cc3565b61275687614ccb565b61275f87614ce9565b61276f6380ac58cd60e01b614d07565b8015612781576000805461ff00191690555b50505050505050565b60006001600160a01b0382166127d9576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6127e28261266a565b6127ed5760006127f0565b60015b60ff1692915050565b606d5481565b6128083361329a565b6128435760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b61284f60798383615845565b507f8868e22e84ebf32da89b2ebcb0ac642816304ea3863b257f240df9098719cb97828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b600054610100900460ff16806128cd57506128cd614b05565b806128db575060005460ff16155b6129165760405162461bcd60e51b815260040180806020018281038252602e815260200180615aae602e913960400191505060405180910390fd5b600054610100900460ff16158015612941576000805460ff1961ff0019909116610100171660011790555b6129516301ffc9a760e01b614d07565b8015612963576000805461ff00191690555b50565b61296f3361254f565b8061297e575061297e3361329a565b6129b95760405162461bcd60e51b8152600401808060200182810382526048815260200180615a026048913960600191505060405180910390fd5b60005b858110156127815760008787838181106129d257fe5b905060200201356001600160a01b0316905060008686848181106129f257fe5b9050602002013590506000858585818110612a0957fe5b905060200201356001600160a01b0316905060006001600160a01b0316836001600160a01b03161415612a75576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6001600160a01b038316600090815260726020526040902060018101548311612ad8576040805162461bcd60e51b815260206004820152601060248201526f414c52454144595f4f574e535f4b455960801b604482015290519081900360640190fd5b805480612af557612ae8826148a7565b508054612af585826146a1565b612aff8184614764565b6040516001600160a01b0384169082907f9d2895c45a420624de863a2f437b022d879f457bf7a829044055a10c5a6fd5e390600090a36001820184905560405181906001600160a01b03871690600090600080516020615adc833981519152908290a45050600190930192506129bc915050565b612b7c3361329a565b612bb75760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b6040805182815290517f0496ed1e61eb69727f9659a8e859288db4758ffb1f744d1c1424634f90a257f49181900360200190a1607b55565b600030604051808061594860259139604080519182900360250182206001600160a01b03881660009081526068602081815291849020546bffffffffffffffffffffffff19606098891b811684880152603487019490945260548601529588901b90911660748401528151808403909501855260889092019052825192019190912091505092915050565b60745490565b60795460609060026000196101006001841615020190911604612ddd57606a60009054906101000a90046001600160a01b03166001600160a01b031663cec410526040518163ffffffff1660e01b815260040160006040518083038186803b158015612ceb57600080fd5b505afa158015612cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612d2857600080fd5b8101908080516040519392919084600160201b821115612d4757600080fd5b908301906020820185811115612d5c57600080fd5b8251600160201b811182820188101715612d7557600080fd5b82525081516020918201929091019080838360005b83811015612da2578181015183820152602001612d8a565b50505050905090810190601f168015612dcf5780820380516001836020036101000a031916815260200191505b5060405250505090506119ee565b6079805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b505050505090506119ee565b6001600160a01b031660009081526072602052604090205490565b612e933361329a565b612ece5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b81612ed88161266a565b612f19576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b611e4e8383614d8b565b600091825260736020526040909120546001600160a01b0391821691161490565b6069546001600160a01b031681565b606954600160a01b900460ff16612fa3576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b6001600160a01b038216331415612ff0576040805162461bcd60e51b815260206004820152600c60248201526b20a8282927ab22afa9a2a62360a11b604482015290519081900360640190fd5b3360008181526077602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6130673361329a565b6130a25760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b606954600160a01b900460ff166130f2576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b606c546069546001600160a01b03908116908316158061317657506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561314857600080fd5b505afa15801561315c573d6000803e3d6000fd5b505050506040513d602081101561317257600080fd5b5051115b6131b7576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015290519081900360640190fd5b606c849055606980546001600160a01b0319166001600160a01b038581169190911791829055604080518581526020810188905284831681830152929091166060830152517f3615065ccf48367ac483ac86701248e2e5ff55bdd9be845007d34a3b68d719d4916080908290030190a150505050565b607d5481565b606b54336000908152607260205260408120600181015491928402918390613261904263ffffffff614e8616565b90508083101561327f5761327a86836000015485613da4565b61328e565b61328e33878460000154611a06565b50600195945050505050565b60006119d860668363ffffffff61491616565b6001600160a01b031660009081526072602052604090206001015490565b6132d43361329a565b61330f5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b6001600160a01b03821615806133325750613332826001600160a01b0316614ec8565b613383576040805162461bcd60e51b815260206004820152601860248201527f494e56414c49445f4f4e5f4b45595f534f4c445f484f4f4b0000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806133a657506133a6816001600160a01b0316614ec8565b6133f7576040805162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4f4e5f4b45595f43414e43454c5f484f4f4b000000000000604482015290519081900360640190fd5b607080546001600160a01b039384166001600160a01b03199182161790915560718054929093169116179055565b60008281526073602052604090205482906001600160a01b031661347e576040805162461bcd60e51b815260206004820152600b60248201526a4e4f5f535543485f4b455960a81b604482015290519081900360640190fd5b61348883336142f0565b8061349757506134973361329a565b6134e8576040805162461bcd60e51b815260206004820152601f60248201527f554e415554484f52495a45445f4b45595f4d414e414745525f55504441544500604482015290519081900360640190fd5b611e4e8383614764565b6134fc8533612bef565b85858585836001600160a01b0316600161351587614f04565b85858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561356f573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146135c8576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b038416600081815260686020908152604091829020805460010190819055825190815291517ff5d035b703f1ad8d403dd02e821d04257acafc5f6c5d70a3907bd8abf33a2e0f9281900390910190a260006136298761264f565b905060006136368261497d565b90506124b08282614d8b565b600061364d3361329a565b806136625750606f546001600160a01b031633145b6136b3576040805162461bcd60e51b815260206004820181905260248201527f4f4e4c595f4c4f434b5f4d414e414745525f4f525f42454e4546494349415259604482015290519081900360640190fd5b6069546040805163095ea7b360e01b81526001600160a01b038681166004830152602482018690529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561370957600080fd5b505af115801561371d573d6000803e3d6000fd5b505050506040513d602081101561373357600080fd5b50519392505050565b613747848484611a06565b61375384848484614f55565b6137a4576040805162461bcd60e51b815260206004820152601d60248201527f4e4f4e5f434f4d504c49414e545f4552433732315f5245434549564552000000604482015290519081900360640190fd5b50505050565b6137b33361329a565b6137ee5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b606954600160a01b900460ff1661383e576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b6040517f25a311358326fb18c62efc24bc28d3126acee8d2a67fd8b2145b757dc8bd1bc190600090a16069805460ff60a01b19169055565b606080808061388430615088565b90506060851561389e5761389786615204565b92506138b1565b6040518060200160405280600081525092505b607a5460026000196101006001841615020190911604613a2257606a60009054906101000a90046001600160a01b03166001600160a01b031663a998e9fb6040518163ffffffff1660e01b815260040160006040518083038186803b15801561391957600080fd5b505afa15801561392d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561395657600080fd5b8101908080516040519392919084600160201b82111561397557600080fd5b90830190602082018581111561398a57600080fd5b8251600160201b8111828201881017156139a357600080fd5b82525081516020918201929091019080838360005b838110156139d05781810151838201526020016139b8565b50505050905090810190601f1680156139fd5780820380516001836020036101000a031916815260200191505b506040818101905260018152602f60f81b6020820152939750929350613ad492505050565b607a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015613aa85780601f10613a7d57610100808354040283529160200191613aa8565b820191906000526020600020905b815481529060010190602001808311613a8b57829003601f168201915b505050505093506040518060200160405280600081525090506040518060200160405280600081525091505b613ae68483838663ffffffff6152c816565b9695505050505050565b600890565b613afe3361329a565b613b395760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b613b4a60668263ffffffff614a8416565b6040516001600160a01b038216907f91d5c045d5bd98bf59a379b259ebca05b93bf79af1845fdf87e3172385d4c7f790600090a250565b80613b8c81336142f0565b80613b9c5750613b9c8133614352565b80613bc45750600081815260736020526040902054613bc4906001600160a01b031633613cd1565b613c03576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b6000613c0e8361264f565b90506000613c1b8261497d565b90506137a48282614d8b565b60006001600160a01b038316613c4857506001600160a01b038116316119d8565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613c9e57600080fd5b505afa158015613cb2573d6000803e3d6000fd5b505050506040513d6020811015613cc857600080fd5b505190506119d8565b6001600160a01b038083166000908152607260209081526040808320548084526075909252822054919290911680613d34575050506001600160a01b0380831660009081526077602090815260408083209385168352929052205460ff166119d8565b6001600160a01b0390811660009081526077602090815260408083209387168352929052205460ff1691506119d89050565b613d7760663363ffffffff61484016565b60405133907f42885193b8178d25fca25a38e6fcc93918501e91be06d85e0c8afb3bad95238090600090a2565b606954600160a01b900460ff16613df4576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b81613dff81336142f0565b80613e0f5750613e0f8133614352565b80613e375750600081815260736020526040902054613e37906001600160a01b031633613cd1565b613e76576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b612710607b5410613ec7576040805162461bcd60e51b815260206004820152601660248201527512d15657d514905394d1915494d7d11254d05093115160521b604482015290519081900360640190fd5b6001600160a01b038416613f14576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6000838152607360205260409020546001600160a01b0316613f358161266a565b613f76576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b6001600160a01b0380821660009081526072602052604080822092881682528120805460018401549192909142900381613fb0878a61426b565b90506000613fc48a8363ffffffff6147e616565b905082811015613fe257899350613fdd8b82600061457f565b614026565b613fec888461426b565b42600189015560405181850395509092508b907f59f2fe866dd27a1c2d34115520888c3150365cbc931aab97fa88c4b9ab40b79590600090a25b8461406d57614034866148a7565b855494506140428c866146a1565b60405185906001600160a01b038e1690600090600080516020615adc833981519152908290a4614083565b4286600101541161408357614083856000614764565b61408f8585600161457f565b848c6001600160a01b0316896001600160a01b0316600080516020615adc83398151915260405160405180910390a46140d9888d8d60405180602001604052806000815250614f55565b6124b0576040805162461bcd60e51b815260206004820152601d60248201527f4e4f4e5f434f4d504c49414e545f4552433732315f5245434549564552000000604482015290519081900360640190fd5b6141333361329a565b806141485750606f546001600160a01b031633145b614199576040805162461bcd60e51b815260206004820181905260248201527f4f4e4c595f4c4f434b5f4d414e414745525f4f525f42454e4546494349415259604482015290519081900360640190fd5b60006141a58330613c27565b905060008215806141b557508183115b156142095760008211614202576040805162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f46554e445360801b604482015290519081900360640190fd5b508061420c565b50815b606f546040805183815290516001600160a01b039283169287169133917f342e7ff505a8a0364cd0dc2ff195c315e43bce86b204846ecd36913e117b109e9181900360200190a4606f546137a49085906001600160a01b031683615419565b60006142768361266a565b614282575060006119d8565b6001600160a01b03831660009081526072602052604081209080846142af574283600101540391506142b3565b8491505b6127106142cb607b548461546690919063ffffffff16565b816142d257fe5b0493506119d892505050565b60686020526000908152604090205481565b6000828152607560205260408120546001600160a01b038381169116148061433d57506000838152607560205260409020546001600160a01b031615801561433d575061433d8383612f23565b1561434a575060016119d8565b5060006119d8565b600091825260766020526040909120546001600160a01b0391821691161490565b607054600090819081906001600160a01b0316156144875760705460405163221c1fd160e01b815233600482018181526001600160a01b038a811660248501528981166044850152608060648501908152895160848601528951919095169463221c1fd1948c938c938c93919260a40190602085019080838360005b838110156144075781810151838201526020016143ef565b50505050905090810190601f1680156144345780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b15801561445457600080fd5b505afa158015614468573d6000803e3d6000fd5b505050506040513d602081101561447e57600080fd5b5051925061448d565b606c5492505b821561457657606a5460408051630cb175e360e01b81526001600160a01b038981166004830152602482018790528251931692630cb175e392604480840193919291829003018186803b1580156144e357600080fd5b505afa1580156144f7573d6000803e3d6000fd5b505050506040513d604081101561450d57600080fd5b508051602090910151909250905082821115614570576040805162461bcd60e51b815260206004820152601c60248201527f494e56414c49445f444953434f554e545f46524f4d5f554e4c4f434b00000000604482015290519081900360640190fd5b81830392505b93509350939050565b6000838152607360205260409020546001600160a01b0316806145dc576040805162461bcd60e51b815260206004820152601060248201526f4e4f4e5f4558495354454e545f4b455960801b604482015290519081900360640190fd5b6001600160a01b0381166000908152607260205260408120600181015490916146048461266a565b9050841561464757801561462c57614622828763ffffffff6147e616565b6001840155614642565b61463c428763ffffffff6147e616565b60018401555b61465d565b614657828763ffffffff614e8616565b60018401555b604080518781528615156020820152815189927fe9408df99703ae33a9d01185bcad328ea8683fb1f920da9c30959c192f21b5b3928290030190a250505050505050565b6000818152607360205260409020546001600160a01b038381169116146147255760748054600181019091557f19a0b39aa25ac793b5f6e9a0534364cc0b3fd1ea9b651e79c7f50a59d48ef8130180546001600160a01b0384166001600160a01b031991821681179092556000838152607360205260409020805490911690911790555b5050565b6000818152607660205260409020546001600160a01b03161561296357600090815260766020526040902080546001600160a01b0319169055565b6000828152607560205260409020546001600160a01b0382811691161461472557600082815260756020526040902080546001600160a01b0319166001600160a01b0383161790556147b582614729565b60405160009083907f9d2895c45a420624de863a2f437b022d879f457bf7a829044055a10c5a6fd5e3908390a35050565b600082820183811015611df7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61484a8282614916565b6148855760405162461bcd60e51b8152600401808060200182810382526021815260200180615a4a6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b805461296357606e8054600101908190559055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526137a49085906154bf565b60006001600160a01b03821661495d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615a8c6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6000816149898161266a565b6149ca576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b6001600160a01b03831660009081526072602052604090206001810154606b54607d544290920391820110614a0357606c549350614a24565b606b54606c54614a19908363ffffffff61546616565b81614a2057fe5b0493505b607d541580614a385750606b54607d548201105b15614a7c576000612710614a59607c54606c5461546690919063ffffffff16565b81614a6057fe5b04905080851115614a75578085039450614a7a565b600094505b505b505050919050565b614a8e8282614916565b15614ae0576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b303b1590565b606980546001600160a01b0319166001600160a01b0383169081179091551580614b9957506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b6b57600080fd5b505afa158015614b7f573d6000803e3d6000fd5b505050506040513d6020811015614b9557600080fd5b5051115b612963576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015290519081900360640190fd5b6069805460ff60a01b1916600160a01b179055565b63bbf81e00831115614c48576040805162461bcd60e51b815260206004820152601860248201527f4d41585f45585049524154494f4e5f3130305f59454152530000000000000000604482015290519081900360640190fd5b606a8054336001600160a01b031991821617909155606f80549091166001600160a01b039590951694909417909355606b91909155606c55606d55565b614c8d6128b4565b8051614ca09060789060208401906158bf565b50612963635b5e139f60e01b614d07565b614cc163780e9d6360e01b614d07565b565b6103e8607c55565b614cd48161329a565b6129635761296360668263ffffffff614a8416565b614cf28161254f565b6129635761296360678263ffffffff614a8416565b6001600160e01b03198082161415614d66576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b03821660008181526072602090815260409182902080548351868152935191943394909391927f0a7068a9989857441c039a14a42b67ed71dd1fcfe5a9b17cc87b252e47bce528929181900390910190a44260018201558115614e0657606954614e06906001600160a01b03168484615419565b6071546001600160a01b031615611e4e576071546040805163b499b6c560e01b81523360048201526001600160a01b038681166024830152604482018690529151919092169163b499b6c591606480830192600092919082900301818387803b158015614e7257600080fd5b505af1158015612781573d6000803e3d6000fd5b6000611df783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615677565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590614efc57508115155b949350505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000614f69846001600160a01b0316614ec8565b614f7557506001614efc565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015614fef578181015183820152602001614fd7565b50505050905090810190601f16801561501c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561503e57600080fd5b505af1158015615052573d6000803e3d6000fd5b505050506040513d602081101561506857600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b03851692918491602082018180388339019050509050600360fc1b816000815181106150ec57fe5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061511557fe5b60200101906001600160f81b031916908160001a90535060005b60148110156151fb578260048583600c016020811061514a57fe5b1a60f81b6001600160f81b031916901c60f81c60ff168151811061516a57fe5b602001015160f81c60f81b82826002026002018151811061518757fe5b60200101906001600160f81b031916908160001a905350828482600c01602081106151ae57fe5b825191901a600f169081106151bf57fe5b602001015160f81c60f81b8282600202600301815181106151dc57fe5b60200101906001600160f81b031916908160001a90535060010161512f565b50949350505050565b6060818061522b5750506040805180820190915260018152600360fc1b602082015261151c565b8260005b811561524357600101600a8204915061522f565b6060816040519080825280601f01601f191660200182016040528015615270576020820181803883390190505b50905060001982015b84156152be57600a850660300160f81b8282806001900393508151811061529c57fe5b60200101906001600160f81b031916908160001a905350600a85049450615279565b5095945050505050565b6060848484846040516020018085805190602001908083835b602083106153005780518252601f1990920191602091820191016152e1565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b602083106153485780518252601f199092019160209182019101615329565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106153905780518252601f199092019160209182019101615371565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106153d85780518252601f1990920191602091820191016153b9565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040529050949350505050565b8015611e4e576001600160a01b03831661544b576154466001600160a01b0383168263ffffffff61570e16565b611e4e565b826137a46001600160a01b038216848463ffffffff6157f316565b600082615475575060006119d8565b8282028284828161548257fe5b0414611df75760405162461bcd60e51b8152600401808060200182810382526021815260200180615a6b6021913960400191505060405180910390fd5b6154d1826001600160a01b0316614ec8565b615522576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106155605780518252601f199092019160209182019101615541565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146155c2576040519150601f19603f3d011682016040523d82523d6000602084013e6155c7565b606091505b50915091508161561e576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156137a45780806020019051602081101561563a57600080fd5b50516137a45760405162461bcd60e51b815260040180806020018281038252602a815260200180615afc602a913960400191505060405180910390fd5b600081848411156157065760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156156cb5781810151838201526020016156b3565b50505050905090810190601f1680156156f85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b80471015615763576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146157ae576040519150601f19603f3d011682016040523d82523d6000602084013e6157b3565b606091505b5050905080611e4e5760405162461bcd60e51b815260040180806020018281038252603a8152602001806159a8603a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e4e9084906154bf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106158865782800160ff198235161785556158b3565b828001600101855582156158b3579182015b828111156158b3578235825591602001919060010190615898565b5061254b92915061592d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061590057805160ff19168380011785556158b3565b828001600101855582156158b3579182015b828111156158b3578251825591602001919060010190615912565b6119ee91905b8082111561254b576000815560010161593356fe63616e63656c416e64526566756e64466f722861646472657373205f6b65794f776e6572294d6978696e4c6f636b4d616e616765723a2063616c6c657220646f6573206e6f74206861766520746865204c6f636b4d616e6167657220726f6c65416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d617920686176652072657665727465644f4e4c595f4b45595f4d414e414745525f4f525f415050524f564544000000004d6978696e4b65794772616e7465723a2063616c6c657220646f6573206e6f74206861766520746865204b65794772616e746572206f72204c6f636b4d616e6167657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a7231582029ece698ffe2fef421fe726174f661b44b8cf3f3515dc5be0d2846c4b710754564736f6c63430005110032",
  "deployedBytecode": "0x6080604052600436106104105760003560e01c806370a082311161021e578063abdf82ce11610123578063d2503485116100ab578063f0ba60401161007a578063f0ba604014611405578063f12c6b6e1461141a578063f3fef3a314611459578063fc42b58f14611492578063fe72e4c1146114cb57610410565b8063d250348514611332578063d32bfb6c14611365578063d4fac45d1461138f578063e985e9c5146113ca57610410565b8063b585a6d5116100f2578063b585a6d5146111d4578063b88d4fde1461120d578063c1c98d03146112de578063c87b56dd146112f3578063d1bbd49c1461131d57610410565b8063abdf82ce146110df578063ad0e0a4d14611112578063b11d7ec11461114d578063b2e0f6e71461118657610410565b8063970aaeb7116101a6578063a22cb46511610175578063a22cb46514610fea578063a2e4cd2e14611025578063a375cb051461105e578063a9059cbb14611073578063aae4b8f7146110ac57610410565b8063970aaeb714610f3057806397aa390a14610f63578063994a8a7114610f9c5780639d76ea5814610fd557610410565b806381a3c943116101ed57806381a3c94314610d865780638577a6d514610ea15780638d0361fc14610ecb57806393fd184414610f0657806395d89b4114610f1b57610410565b806370a0823114610cae57806374b6c10614610ce1578063782a4ade14610cf65780638129fc1c14610d7157610410565b80632f745c59116103245780634f6ccce7116102ac578063564aa99d1161027b578063564aa99d14610b2d57806356e0d51f14610b605780636352211e14610b755780636d8ea5b414610b9f5780636eadde4314610bd257610410565b80634f6ccce714610a2257806352b0f63814610a4c57806352d6a8e414610a7f578063550ef3a814610ab257610410565b806339f46986116102f357806339f46986146108e25780633f33133a146109125780634136aa35146109a057806342842e0e146109b55780634d025fed146109f857610410565b80632f745c59146107ef57806330176e131461082857806335576ad0146108a357806338af3eed146108cd57610410565b806310803b72116103a7578063183767da11610376578063183767da1461073a578063217751bc1461074f57806323b872dd146107645780632af9162a146107a75780632d33dd5b146107da57610410565b806310803b721461067b57806310e56973146106fb57806311a4c03a1461071057806318160ddd1461072557610410565b8063095ea7b3116103e3578063095ea7b314610554578063097ba3331461058d5780630aaffd2a146106335780630f15023b1461066657610410565b806301ffc9a714610412578063025e7c271461045a57806306fdde03146104a0578063081812fc1461052a575b005b34801561041e57600080fd5b506104466004803603602081101561043557600080fd5b50356001600160e01b0319166114fe565b604080519115158252519081900360200190f35b34801561046657600080fd5b506104846004803603602081101561047d57600080fd5b5035611521565b604080516001600160a01b039092168252519081900360200190f35b3480156104ac57600080fd5b506104b5611548565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104ef5781810151838201526020016104d7565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053657600080fd5b506104846004803603602081101561054d57600080fd5b50356115d6565b34801561056057600080fd5b506104106004803603604081101561057757600080fd5b506001600160a01b03813516906020013561164c565b34801561059957600080fd5b50610621600480360360608110156105b057600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156105e357600080fd5b8201836020820111156105f557600080fd5b803590602001918460018302840111600160201b8311171561061657600080fd5b5090925090506117d3565b60408051918252519081900360200190f35b34801561063f57600080fd5b506104106004803603602081101561065657600080fd5b50356001600160a01b0316611822565b34801561067257600080fd5b506104846118ff565b34801561068757600080fd5b506106ab6004803603604081101561069e57600080fd5b508035906020013561190e565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106e75781810151838201526020016106cf565b505050509050019250505060405180910390f35b34801561070757600080fd5b506106216119de565b34801561071c57600080fd5b506106216119e4565b34801561073157600080fd5b506106216119ea565b34801561074657600080fd5b506106216119f1565b34801561075b57600080fd5b506104846119f7565b34801561077057600080fd5b506104106004803603606081101561078757600080fd5b506001600160a01b03813581169160208101359091169060400135611a06565b3480156107b357600080fd5b50610410600480360360208110156107ca57600080fd5b50356001600160a01b0316611d05565b3480156107e657600080fd5b50610484611d91565b3480156107fb57600080fd5b506106216004803603604081101561081257600080fd5b506001600160a01b038135169060200135611da0565b34801561083457600080fd5b506104106004803603602081101561084b57600080fd5b810190602081018135600160201b81111561086557600080fd5b82018360208201111561087757600080fd5b803590602001918460018302840111600160201b8311171561089857600080fd5b509092509050611dfe565b3480156108af57600080fd5b50610410600480360360208110156108c657600080fd5b5035611e53565b3480156108d957600080fd5b50610484611ef5565b3480156108ee57600080fd5b506104106004803603604081101561090557600080fd5b5080359060200135611f04565b6104106004803603608081101561092857600080fd5b8135916001600160a01b03602082013581169260408301359091169190810190608081016060820135600160201b81111561096257600080fd5b82018360208201111561097457600080fd5b803590602001918460018302840111600160201b8311171561099557600080fd5b509092509050611f8e565b3480156109ac57600080fd5b506104466124be565b3480156109c157600080fd5b50610410600480360360608110156109d857600080fd5b506001600160a01b038135811691602081013590911690604001356124ce565b348015610a0457600080fd5b5061048460048036036020811015610a1b57600080fd5b50356124e9565b348015610a2e57600080fd5b5061062160048036036020811015610a4557600080fd5b5035612504565b348015610a5857600080fd5b5061044660048036036020811015610a6f57600080fd5b50356001600160a01b031661254f565b348015610a8b57600080fd5b5061062160048036036020811015610aa257600080fd5b50356001600160a01b0316612562565b348015610abe57600080fd5b5061041060048036036020811015610ad557600080fd5b810190602081018135600160201b811115610aef57600080fd5b820183602082011115610b0157600080fd5b803590602001918460018302840111600160201b83111715610b2257600080fd5b50909250905061256d565b348015610b3957600080fd5b5061041060048036036020811015610b5057600080fd5b50356001600160a01b03166125bd565b348015610b6c57600080fd5b50610621612649565b348015610b8157600080fd5b5061048460048036036020811015610b9857600080fd5b503561264f565b348015610bab57600080fd5b5061044660048036036020811015610bc257600080fd5b50356001600160a01b031661266a565b348015610bde57600080fd5b50610410600480360360c0811015610bf557600080fd5b6001600160a01b03823581169260208101359260408201359092169160608201359160808101359181019060c0810160a0820135600160201b811115610c3a57600080fd5b820183602082011115610c4c57600080fd5b803590602001918460018302840111600160201b83111715610c6d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061268a945050505050565b348015610cba57600080fd5b5061062160048036036020811015610cd157600080fd5b50356001600160a01b031661278a565b348015610ced57600080fd5b506106216127f9565b348015610d0257600080fd5b5061041060048036036020811015610d1957600080fd5b810190602081018135600160201b811115610d3357600080fd5b820183602082011115610d4557600080fd5b803590602001918460018302840111600160201b83111715610d6657600080fd5b5090925090506127ff565b348015610d7d57600080fd5b506104106128b4565b348015610d9257600080fd5b5061041060048036036060811015610da957600080fd5b810190602081018135600160201b811115610dc357600080fd5b820183602082011115610dd557600080fd5b803590602001918460208302840111600160201b83111715610df657600080fd5b919390929091602081019035600160201b811115610e1357600080fd5b820183602082011115610e2557600080fd5b803590602001918460208302840111600160201b83111715610e4657600080fd5b919390929091602081019035600160201b811115610e6357600080fd5b820183602082011115610e7557600080fd5b803590602001918460208302840111600160201b83111715610e9657600080fd5b509092509050612966565b348015610ead57600080fd5b5061041060048036036020811015610ec457600080fd5b5035612b73565b348015610ed757600080fd5b5061062160048036036040811015610eee57600080fd5b506001600160a01b0381358116916020013516612bef565b348015610f1257600080fd5b50610621612c7a565b348015610f2757600080fd5b506104b5612c80565b348015610f3c57600080fd5b5061062160048036036020811015610f5357600080fd5b50356001600160a01b0316612e6f565b348015610f6f57600080fd5b5061041060048036036040811015610f8657600080fd5b506001600160a01b038135169060200135612e8a565b348015610fa857600080fd5b5061044660048036036040811015610fbf57600080fd5b50803590602001356001600160a01b0316612f23565b348015610fe157600080fd5b50610484612f44565b348015610ff657600080fd5b506104106004803603604081101561100d57600080fd5b506001600160a01b0381351690602001351515612f53565b34801561103157600080fd5b506104106004803603604081101561104857600080fd5b50803590602001356001600160a01b031661305e565b34801561106a57600080fd5b5061062161322d565b34801561107f57600080fd5b506104466004803603604081101561109657600080fd5b506001600160a01b038135169060200135613233565b3480156110b857600080fd5b50610446600480360360208110156110cf57600080fd5b50356001600160a01b031661329a565b3480156110eb57600080fd5b506106216004803603602081101561110257600080fd5b50356001600160a01b03166132ad565b34801561111e57600080fd5b506104106004803603604081101561113557600080fd5b506001600160a01b03813581169160200135166132cb565b34801561115957600080fd5b506104106004803603604081101561117057600080fd5b50803590602001356001600160a01b0316613425565b34801561119257600080fd5b50610410600480360360a08110156111a957600080fd5b506001600160a01b038135169060ff60208201351690604081013590606081013590608001356134f2565b3480156111e057600080fd5b50610446600480360360408110156111f757600080fd5b506001600160a01b038135169060200135613642565b34801561121957600080fd5b506104106004803603608081101561123057600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561126a57600080fd5b82018360208201111561127c57600080fd5b803590602001918460018302840111600160201b8311171561129d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061373c945050505050565b3480156112ea57600080fd5b506104106137aa565b3480156112ff57600080fd5b506104b56004803603602081101561131657600080fd5b5035613876565b34801561132957600080fd5b50610621613af0565b34801561133e57600080fd5b506104106004803603602081101561135557600080fd5b50356001600160a01b0316613af5565b34801561137157600080fd5b506104106004803603602081101561138857600080fd5b5035613b81565b34801561139b57600080fd5b50610621600480360360408110156113b257600080fd5b506001600160a01b0381358116916020013516613c27565b3480156113d657600080fd5b50610446600480360360408110156113ed57600080fd5b506001600160a01b0381358116916020013516613cd1565b34801561141157600080fd5b50610410613d66565b34801561142657600080fd5b506104106004803603606081101561143d57600080fd5b506001600160a01b038135169060208101359060400135613da4565b34801561146557600080fd5b506104106004803603604081101561147c57600080fd5b506001600160a01b03813516906020013561412a565b34801561149e57600080fd5b50610621600480360360408110156114b557600080fd5b506001600160a01b03813516906020013561426b565b3480156114d757600080fd5b50610621600480360360208110156114ee57600080fd5b50356001600160a01b03166142de565b6001600160e01b0319811660009081526033602052604090205460ff165b919050565b6074818154811061152e57fe5b6000918252602090912001546001600160a01b0316905081565b6078805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156115ce5780601f106115a3576101008083540402835291602001916115ce565b820191906000526020600020905b8154815290600101906020018083116115b157829003601f168201915b505050505081565b60008181526073602052604081205482906001600160a01b031661162f576040805162461bcd60e51b815260206004820152600b60248201526a4e4f5f535543485f4b455960a81b604482015290519081900360640190fd5b50506000908152607660205260409020546001600160a01b031690565b606954600160a01b900460ff1661169c576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b806116a781336142f0565b806116b757506116b78133614352565b806116df57506000818152607360205260409020546116df906001600160a01b031633613cd1565b61171e576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b336001600160a01b038416141561176b576040805162461bcd60e51b815260206004820152600c60248201526b20a8282927ab22afa9a2a62360a11b604482015290519081900360640190fd5b600082815260766020908152604080832080546001600160a01b0319166001600160a01b038881169182179092556073909352818420549151869492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611816858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061437392505050565b50909695505050505050565b606f546001600160a01b031633148061183f575061183f3361329a565b611890576040805162461bcd60e51b815260206004820152601f60248201527f4f4e4c595f42454e45464943494152595f4f525f4c4f434b4d414e4147455200604482015290519081900360640190fd5b6001600160a01b0381166118dd576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b606a546001600160a01b031681565b607454606090829084820290600090828401111561193457506074548181039250611939565b508082015b606083604051908082528060200260200182016040528015611965578160200160208202803883390190505b5090506000835b838110156119cf576074818154811061198157fe5b9060005260206000200160009054906101000a90046001600160a01b03168383815181106119ab57fe5b6001600160a01b03909216602092830291909101909101526001918201910161196c565b50909450505050505b92915050565b606c5481565b606b5481565b606e545b90565b607b5481565b6071546001600160a01b031681565b606954600160a01b900460ff16611a56576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b82611a608161266a565b611aa1576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b81611aac81336142f0565b80611abc5750611abc8133614352565b80611ae45750600081815260736020526040902054611ae4906001600160a01b031633613cd1565b611b23576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b611b2d8386612f23565b611b7e576040805162461bcd60e51b815260206004820152601c60248201527f5452414e534645525f46524f4d3a204e4f545f4b45595f4f574e455200000000604482015290519081900360640190fd5b612710607b5410611bcf576040805162461bcd60e51b815260206004820152601660248201527512d15657d514905394d1915494d7d11254d05093115160521b604482015290519081900360640190fd5b6001600160a01b038416611c1c576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6000611c2986600061426b565b6001600160a01b03808816600090815260726020526040808220928916825281206001810154939450919290611c62908890869061457f565b8154611c7e57868255611c7588886146a1565b611c7e87614729565b428111611cac5760018084015490830155868255611c9d876000614764565b611ca788886146a1565b611cc9565b6001830154611cc39042830363ffffffff6147e616565b60018301555b426001840155600080845560405188916001600160a01b03808c1692908d1691600080516020615adc83398151915291a4505050505050505050565b611d0e3361329a565b611d495760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611d5a60678263ffffffff61484016565b6040516001600160a01b038216907f766f6199fea59554b9ff688e413302b9200f85d74811c053c12d945ac6d8dd7a90600090a250565b6070546001600160a01b031681565b60008115611dee576040805162461bcd60e51b815260206004820152601660248201527527a7262cafa7a722afa5a2acafa822a92fa7aba722a960511b604482015290519081900360640190fd5b611df783612e6f565b9392505050565b611e073361329a565b611e425760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611e4e607a8383615845565b505050565b336000908152606860205260409020548111611eab576040805162461bcd60e51b81526020600482015260126024820152711393d390d157d053149150511657d554d15160721b604482015290519081900360640190fd5b33600081815260686020908152604091829020849055815184815291517ff5d035b703f1ad8d403dd02e821d04257acafc5f6c5d70a3907bd8abf33a2e0f9281900390910190a250565b606f546001600160a01b031681565b611f0d3361329a565b611f485760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b604080518381526020810183905281517fd6867bc538320e67d7bdc35860c27c08486eb490b4fd9b820fff18fb28381d3c929181900390910190a1607d91909155607c55565b606954600160a01b900460ff16611fde576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b606e54606d5411612026576040805162461bcd60e51b815260206004820152600d60248201526c1313d0d2d7d4d3d31117d3d555609a1b604482015290519081900360640190fd5b6001600160a01b038416612073576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6001600160a01b038416600090815260726020526040812080549091816120e35761209d836148a7565b825491506120ab87836146a1565b50606b5442016001830181905560405182906001600160a01b03891690600090600080516020615adc833981519152908290a46121ab565b428360010154111561215357606b5460018401546121069163ffffffff6147e616565b600184018190556040805182815290519192506001600160a01b038916917f872bd7c99ad5e7b6ed7f0a890f348839cb8e225c9deaa3909afedae54c93d17d9181900360200190a26121ab565b50606b5442016001830181905561216b826000614764565b6040805182815290516001600160a01b038916917f872bd7c99ad5e7b6ed7f0a890f348839cb8e225c9deaa3909afedae54c93d17d919081900360200190a25b60008060006121f18a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061437392505050565b91945092509050811561226b57606a5460408051633652466360e01b8152600481018590526024810184905290516001600160a01b039092169163365246639160448082019260009290919082900301818387803b15801561225257600080fd5b505af1158015612266573d6000803e3d6000fd5b505050505b606a546001600160a01b031663939d9f1f846122868c61266a565b80156122a457508c6001600160a01b03168c6001600160a01b031614155b6122af5760006122b1565b8b5b6040518363ffffffff1660e01b815260040180838152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b15801561230057600080fd5b505af1158015612314573d6000803e3d6000fd5b5050606954600092506001600160a01b031615905061235457506069548b906001600160a01b031661234e8133308563ffffffff6148bc16565b50612357565b50345b838110156123a1576040805162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f56414c554560701b604482015290519081900360640190fd5b6070546001600160a01b0316156124b057607060009054906101000a90046001600160a01b03166001600160a01b03166398499657338d8d8d8d8a886040518863ffffffff1660e01b815260040180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001806020018481526020018381526020018281038252868682818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b505050505b505050505050505050505050565b606954600160a01b900460ff1681565b611e4e8383836040518060200160405280600081525061373c565b6075602052600090815260409020546001600160a01b031681565b6000606e54821061254b576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b604482015290519081900360640190fd5b5090565b60006119d860678363ffffffff61491616565b60006119d88261497d565b6125763361329a565b6125b15760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b611e4e60788383615845565b6125c63361329a565b6126015760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b61261260678263ffffffff614a8416565b6040516001600160a01b038216907f684f8a71407db0c334454ebe9c9b288549317893a20b10dc779ec5c118dcd12190600090a250565b607c5481565b6000908152607360205260409020546001600160a01b031690565b6001600160a01b0316600090815260726020526040902060010154421090565b600054610100900460ff16806126a357506126a3614b05565b806126b1575060005460ff16155b6126ec5760405162461bcd60e51b815260040180806020018281038252602e815260200180615aae602e913960400191505060405180910390fd5b600054610100900460ff16158015612717576000805460ff1961ff0019909116610100171660011790555b61272085614b0b565b612728614bda565b61273487878686614bef565b61273d82614c85565b612745614cb1565b61274d614cc3565b61275687614ccb565b61275f87614ce9565b61276f6380ac58cd60e01b614d07565b8015612781576000805461ff00191690555b50505050505050565b60006001600160a01b0382166127d9576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6127e28261266a565b6127ed5760006127f0565b60015b60ff1692915050565b606d5481565b6128083361329a565b6128435760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b61284f60798383615845565b507f8868e22e84ebf32da89b2ebcb0ac642816304ea3863b257f240df9098719cb97828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b600054610100900460ff16806128cd57506128cd614b05565b806128db575060005460ff16155b6129165760405162461bcd60e51b815260040180806020018281038252602e815260200180615aae602e913960400191505060405180910390fd5b600054610100900460ff16158015612941576000805460ff1961ff0019909116610100171660011790555b6129516301ffc9a760e01b614d07565b8015612963576000805461ff00191690555b50565b61296f3361254f565b8061297e575061297e3361329a565b6129b95760405162461bcd60e51b8152600401808060200182810382526048815260200180615a026048913960600191505060405180910390fd5b60005b858110156127815760008787838181106129d257fe5b905060200201356001600160a01b0316905060008686848181106129f257fe5b9050602002013590506000858585818110612a0957fe5b905060200201356001600160a01b0316905060006001600160a01b0316836001600160a01b03161415612a75576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6001600160a01b038316600090815260726020526040902060018101548311612ad8576040805162461bcd60e51b815260206004820152601060248201526f414c52454144595f4f574e535f4b455960801b604482015290519081900360640190fd5b805480612af557612ae8826148a7565b508054612af585826146a1565b612aff8184614764565b6040516001600160a01b0384169082907f9d2895c45a420624de863a2f437b022d879f457bf7a829044055a10c5a6fd5e390600090a36001820184905560405181906001600160a01b03871690600090600080516020615adc833981519152908290a45050600190930192506129bc915050565b612b7c3361329a565b612bb75760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b6040805182815290517f0496ed1e61eb69727f9659a8e859288db4758ffb1f744d1c1424634f90a257f49181900360200190a1607b55565b600030604051808061594860259139604080519182900360250182206001600160a01b03881660009081526068602081815291849020546bffffffffffffffffffffffff19606098891b811684880152603487019490945260548601529588901b90911660748401528151808403909501855260889092019052825192019190912091505092915050565b60745490565b60795460609060026000196101006001841615020190911604612ddd57606a60009054906101000a90046001600160a01b03166001600160a01b031663cec410526040518163ffffffff1660e01b815260040160006040518083038186803b158015612ceb57600080fd5b505afa158015612cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612d2857600080fd5b8101908080516040519392919084600160201b821115612d4757600080fd5b908301906020820185811115612d5c57600080fd5b8251600160201b811182820188101715612d7557600080fd5b82525081516020918201929091019080838360005b83811015612da2578181015183820152602001612d8a565b50505050905090810190601f168015612dcf5780820380516001836020036101000a031916815260200191505b5060405250505090506119ee565b6079805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b505050505090506119ee565b6001600160a01b031660009081526072602052604090205490565b612e933361329a565b612ece5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b81612ed88161266a565b612f19576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b611e4e8383614d8b565b600091825260736020526040909120546001600160a01b0391821691161490565b6069546001600160a01b031681565b606954600160a01b900460ff16612fa3576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b6001600160a01b038216331415612ff0576040805162461bcd60e51b815260206004820152600c60248201526b20a8282927ab22afa9a2a62360a11b604482015290519081900360640190fd5b3360008181526077602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6130673361329a565b6130a25760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b606954600160a01b900460ff166130f2576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b606c546069546001600160a01b03908116908316158061317657506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561314857600080fd5b505afa15801561315c573d6000803e3d6000fd5b505050506040513d602081101561317257600080fd5b5051115b6131b7576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015290519081900360640190fd5b606c849055606980546001600160a01b0319166001600160a01b038581169190911791829055604080518581526020810188905284831681830152929091166060830152517f3615065ccf48367ac483ac86701248e2e5ff55bdd9be845007d34a3b68d719d4916080908290030190a150505050565b607d5481565b606b54336000908152607260205260408120600181015491928402918390613261904263ffffffff614e8616565b90508083101561327f5761327a86836000015485613da4565b61328e565b61328e33878460000154611a06565b50600195945050505050565b60006119d860668363ffffffff61491616565b6001600160a01b031660009081526072602052604090206001015490565b6132d43361329a565b61330f5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b6001600160a01b03821615806133325750613332826001600160a01b0316614ec8565b613383576040805162461bcd60e51b815260206004820152601860248201527f494e56414c49445f4f4e5f4b45595f534f4c445f484f4f4b0000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806133a657506133a6816001600160a01b0316614ec8565b6133f7576040805162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4f4e5f4b45595f43414e43454c5f484f4f4b000000000000604482015290519081900360640190fd5b607080546001600160a01b039384166001600160a01b03199182161790915560718054929093169116179055565b60008281526073602052604090205482906001600160a01b031661347e576040805162461bcd60e51b815260206004820152600b60248201526a4e4f5f535543485f4b455960a81b604482015290519081900360640190fd5b61348883336142f0565b8061349757506134973361329a565b6134e8576040805162461bcd60e51b815260206004820152601f60248201527f554e415554484f52495a45445f4b45595f4d414e414745525f55504441544500604482015290519081900360640190fd5b611e4e8383614764565b6134fc8533612bef565b85858585836001600160a01b0316600161351587614f04565b85858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561356f573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146135c8576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b038416600081815260686020908152604091829020805460010190819055825190815291517ff5d035b703f1ad8d403dd02e821d04257acafc5f6c5d70a3907bd8abf33a2e0f9281900390910190a260006136298761264f565b905060006136368261497d565b90506124b08282614d8b565b600061364d3361329a565b806136625750606f546001600160a01b031633145b6136b3576040805162461bcd60e51b815260206004820181905260248201527f4f4e4c595f4c4f434b5f4d414e414745525f4f525f42454e4546494349415259604482015290519081900360640190fd5b6069546040805163095ea7b360e01b81526001600160a01b038681166004830152602482018690529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561370957600080fd5b505af115801561371d573d6000803e3d6000fd5b505050506040513d602081101561373357600080fd5b50519392505050565b613747848484611a06565b61375384848484614f55565b6137a4576040805162461bcd60e51b815260206004820152601d60248201527f4e4f4e5f434f4d504c49414e545f4552433732315f5245434549564552000000604482015290519081900360640190fd5b50505050565b6137b33361329a565b6137ee5760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b606954600160a01b900460ff1661383e576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b6040517f25a311358326fb18c62efc24bc28d3126acee8d2a67fd8b2145b757dc8bd1bc190600090a16069805460ff60a01b19169055565b606080808061388430615088565b90506060851561389e5761389786615204565b92506138b1565b6040518060200160405280600081525092505b607a5460026000196101006001841615020190911604613a2257606a60009054906101000a90046001600160a01b03166001600160a01b031663a998e9fb6040518163ffffffff1660e01b815260040160006040518083038186803b15801561391957600080fd5b505afa15801561392d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561395657600080fd5b8101908080516040519392919084600160201b82111561397557600080fd5b90830190602082018581111561398a57600080fd5b8251600160201b8111828201881017156139a357600080fd5b82525081516020918201929091019080838360005b838110156139d05781810151838201526020016139b8565b50505050905090810190601f1680156139fd5780820380516001836020036101000a031916815260200191505b506040818101905260018152602f60f81b6020820152939750929350613ad492505050565b607a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015613aa85780601f10613a7d57610100808354040283529160200191613aa8565b820191906000526020600020905b815481529060010190602001808311613a8b57829003601f168201915b505050505093506040518060200160405280600081525090506040518060200160405280600081525091505b613ae68483838663ffffffff6152c816565b9695505050505050565b600890565b613afe3361329a565b613b395760405162461bcd60e51b815260040180806020018281038252603b81526020018061596d603b913960400191505060405180910390fd5b613b4a60668263ffffffff614a8416565b6040516001600160a01b038216907f91d5c045d5bd98bf59a379b259ebca05b93bf79af1845fdf87e3172385d4c7f790600090a250565b80613b8c81336142f0565b80613b9c5750613b9c8133614352565b80613bc45750600081815260736020526040902054613bc4906001600160a01b031633613cd1565b613c03576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b6000613c0e8361264f565b90506000613c1b8261497d565b90506137a48282614d8b565b60006001600160a01b038316613c4857506001600160a01b038116316119d8565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613c9e57600080fd5b505afa158015613cb2573d6000803e3d6000fd5b505050506040513d6020811015613cc857600080fd5b505190506119d8565b6001600160a01b038083166000908152607260209081526040808320548084526075909252822054919290911680613d34575050506001600160a01b0380831660009081526077602090815260408083209385168352929052205460ff166119d8565b6001600160a01b0390811660009081526077602090815260408083209387168352929052205460ff1691506119d89050565b613d7760663363ffffffff61484016565b60405133907f42885193b8178d25fca25a38e6fcc93918501e91be06d85e0c8afb3bad95238090600090a2565b606954600160a01b900460ff16613df4576040805162461bcd60e51b815260206004820152600f60248201526e1313d0d2d7d11154149150d0551151608a1b604482015290519081900360640190fd5b81613dff81336142f0565b80613e0f5750613e0f8133614352565b80613e375750600081815260736020526040902054613e37906001600160a01b031633613cd1565b613e76576040805162461bcd60e51b815260206004820152601c60248201526000805160206159e2833981519152604482015290519081900360640190fd5b612710607b5410613ec7576040805162461bcd60e51b815260206004820152601660248201527512d15657d514905394d1915494d7d11254d05093115160521b604482015290519081900360640190fd5b6001600160a01b038416613f14576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b6000838152607360205260409020546001600160a01b0316613f358161266a565b613f76576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b6001600160a01b0380821660009081526072602052604080822092881682528120805460018401549192909142900381613fb0878a61426b565b90506000613fc48a8363ffffffff6147e616565b905082811015613fe257899350613fdd8b82600061457f565b614026565b613fec888461426b565b42600189015560405181850395509092508b907f59f2fe866dd27a1c2d34115520888c3150365cbc931aab97fa88c4b9ab40b79590600090a25b8461406d57614034866148a7565b855494506140428c866146a1565b60405185906001600160a01b038e1690600090600080516020615adc833981519152908290a4614083565b4286600101541161408357614083856000614764565b61408f8585600161457f565b848c6001600160a01b0316896001600160a01b0316600080516020615adc83398151915260405160405180910390a46140d9888d8d60405180602001604052806000815250614f55565b6124b0576040805162461bcd60e51b815260206004820152601d60248201527f4e4f4e5f434f4d504c49414e545f4552433732315f5245434549564552000000604482015290519081900360640190fd5b6141333361329a565b806141485750606f546001600160a01b031633145b614199576040805162461bcd60e51b815260206004820181905260248201527f4f4e4c595f4c4f434b5f4d414e414745525f4f525f42454e4546494349415259604482015290519081900360640190fd5b60006141a58330613c27565b905060008215806141b557508183115b156142095760008211614202576040805162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f46554e445360801b604482015290519081900360640190fd5b508061420c565b50815b606f546040805183815290516001600160a01b039283169287169133917f342e7ff505a8a0364cd0dc2ff195c315e43bce86b204846ecd36913e117b109e9181900360200190a4606f546137a49085906001600160a01b031683615419565b60006142768361266a565b614282575060006119d8565b6001600160a01b03831660009081526072602052604081209080846142af574283600101540391506142b3565b8491505b6127106142cb607b548461546690919063ffffffff16565b816142d257fe5b0493506119d892505050565b60686020526000908152604090205481565b6000828152607560205260408120546001600160a01b038381169116148061433d57506000838152607560205260409020546001600160a01b031615801561433d575061433d8383612f23565b1561434a575060016119d8565b5060006119d8565b600091825260766020526040909120546001600160a01b0391821691161490565b607054600090819081906001600160a01b0316156144875760705460405163221c1fd160e01b815233600482018181526001600160a01b038a811660248501528981166044850152608060648501908152895160848601528951919095169463221c1fd1948c938c938c93919260a40190602085019080838360005b838110156144075781810151838201526020016143ef565b50505050905090810190601f1680156144345780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b15801561445457600080fd5b505afa158015614468573d6000803e3d6000fd5b505050506040513d602081101561447e57600080fd5b5051925061448d565b606c5492505b821561457657606a5460408051630cb175e360e01b81526001600160a01b038981166004830152602482018790528251931692630cb175e392604480840193919291829003018186803b1580156144e357600080fd5b505afa1580156144f7573d6000803e3d6000fd5b505050506040513d604081101561450d57600080fd5b508051602090910151909250905082821115614570576040805162461bcd60e51b815260206004820152601c60248201527f494e56414c49445f444953434f554e545f46524f4d5f554e4c4f434b00000000604482015290519081900360640190fd5b81830392505b93509350939050565b6000838152607360205260409020546001600160a01b0316806145dc576040805162461bcd60e51b815260206004820152601060248201526f4e4f4e5f4558495354454e545f4b455960801b604482015290519081900360640190fd5b6001600160a01b0381166000908152607260205260408120600181015490916146048461266a565b9050841561464757801561462c57614622828763ffffffff6147e616565b6001840155614642565b61463c428763ffffffff6147e616565b60018401555b61465d565b614657828763ffffffff614e8616565b60018401555b604080518781528615156020820152815189927fe9408df99703ae33a9d01185bcad328ea8683fb1f920da9c30959c192f21b5b3928290030190a250505050505050565b6000818152607360205260409020546001600160a01b038381169116146147255760748054600181019091557f19a0b39aa25ac793b5f6e9a0534364cc0b3fd1ea9b651e79c7f50a59d48ef8130180546001600160a01b0384166001600160a01b031991821681179092556000838152607360205260409020805490911690911790555b5050565b6000818152607660205260409020546001600160a01b03161561296357600090815260766020526040902080546001600160a01b0319169055565b6000828152607560205260409020546001600160a01b0382811691161461472557600082815260756020526040902080546001600160a01b0319166001600160a01b0383161790556147b582614729565b60405160009083907f9d2895c45a420624de863a2f437b022d879f457bf7a829044055a10c5a6fd5e3908390a35050565b600082820183811015611df7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61484a8282614916565b6148855760405162461bcd60e51b8152600401808060200182810382526021815260200180615a4a6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b805461296357606e8054600101908190559055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526137a49085906154bf565b60006001600160a01b03821661495d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615a8c6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6000816149898161266a565b6149ca576040805162461bcd60e51b815260206004820152600d60248201526c12d15657d393d517d590531251609a1b604482015290519081900360640190fd5b6001600160a01b03831660009081526072602052604090206001810154606b54607d544290920391820110614a0357606c549350614a24565b606b54606c54614a19908363ffffffff61546616565b81614a2057fe5b0493505b607d541580614a385750606b54607d548201105b15614a7c576000612710614a59607c54606c5461546690919063ffffffff16565b81614a6057fe5b04905080851115614a75578085039450614a7a565b600094505b505b505050919050565b614a8e8282614916565b15614ae0576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b303b1590565b606980546001600160a01b0319166001600160a01b0383169081179091551580614b9957506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b6b57600080fd5b505afa158015614b7f573d6000803e3d6000fd5b505050506040513d6020811015614b9557600080fd5b5051115b612963576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015290519081900360640190fd5b6069805460ff60a01b1916600160a01b179055565b63bbf81e00831115614c48576040805162461bcd60e51b815260206004820152601860248201527f4d41585f45585049524154494f4e5f3130305f59454152530000000000000000604482015290519081900360640190fd5b606a8054336001600160a01b031991821617909155606f80549091166001600160a01b039590951694909417909355606b91909155606c55606d55565b614c8d6128b4565b8051614ca09060789060208401906158bf565b50612963635b5e139f60e01b614d07565b614cc163780e9d6360e01b614d07565b565b6103e8607c55565b614cd48161329a565b6129635761296360668263ffffffff614a8416565b614cf28161254f565b6129635761296360678263ffffffff614a8416565b6001600160e01b03198082161415614d66576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b03821660008181526072602090815260409182902080548351868152935191943394909391927f0a7068a9989857441c039a14a42b67ed71dd1fcfe5a9b17cc87b252e47bce528929181900390910190a44260018201558115614e0657606954614e06906001600160a01b03168484615419565b6071546001600160a01b031615611e4e576071546040805163b499b6c560e01b81523360048201526001600160a01b038681166024830152604482018690529151919092169163b499b6c591606480830192600092919082900301818387803b158015614e7257600080fd5b505af1158015612781573d6000803e3d6000fd5b6000611df783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615677565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590614efc57508115155b949350505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000614f69846001600160a01b0316614ec8565b614f7557506001614efc565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015614fef578181015183820152602001614fd7565b50505050905090810190601f16801561501c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561503e57600080fd5b505af1158015615052573d6000803e3d6000fd5b505050506040513d602081101561506857600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b03851692918491602082018180388339019050509050600360fc1b816000815181106150ec57fe5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061511557fe5b60200101906001600160f81b031916908160001a90535060005b60148110156151fb578260048583600c016020811061514a57fe5b1a60f81b6001600160f81b031916901c60f81c60ff168151811061516a57fe5b602001015160f81c60f81b82826002026002018151811061518757fe5b60200101906001600160f81b031916908160001a905350828482600c01602081106151ae57fe5b825191901a600f169081106151bf57fe5b602001015160f81c60f81b8282600202600301815181106151dc57fe5b60200101906001600160f81b031916908160001a90535060010161512f565b50949350505050565b6060818061522b5750506040805180820190915260018152600360fc1b602082015261151c565b8260005b811561524357600101600a8204915061522f565b6060816040519080825280601f01601f191660200182016040528015615270576020820181803883390190505b50905060001982015b84156152be57600a850660300160f81b8282806001900393508151811061529c57fe5b60200101906001600160f81b031916908160001a905350600a85049450615279565b5095945050505050565b6060848484846040516020018085805190602001908083835b602083106153005780518252601f1990920191602091820191016152e1565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b602083106153485780518252601f199092019160209182019101615329565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106153905780518252601f199092019160209182019101615371565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106153d85780518252601f1990920191602091820191016153b9565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040529050949350505050565b8015611e4e576001600160a01b03831661544b576154466001600160a01b0383168263ffffffff61570e16565b611e4e565b826137a46001600160a01b038216848463ffffffff6157f316565b600082615475575060006119d8565b8282028284828161548257fe5b0414611df75760405162461bcd60e51b8152600401808060200182810382526021815260200180615a6b6021913960400191505060405180910390fd5b6154d1826001600160a01b0316614ec8565b615522576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106155605780518252601f199092019160209182019101615541565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146155c2576040519150601f19603f3d011682016040523d82523d6000602084013e6155c7565b606091505b50915091508161561e576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156137a45780806020019051602081101561563a57600080fd5b50516137a45760405162461bcd60e51b815260040180806020018281038252602a815260200180615afc602a913960400191505060405180910390fd5b600081848411156157065760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156156cb5781810151838201526020016156b3565b50505050905090810190601f1680156156f85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b80471015615763576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146157ae576040519150601f19603f3d011682016040523d82523d6000602084013e6157b3565b606091505b5050905080611e4e5760405162461bcd60e51b815260040180806020018281038252603a8152602001806159a8603a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e4e9084906154bf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106158865782800160ff198235161785556158b3565b828001600101855582156158b3579182015b828111156158b3578235825591602001919060010190615898565b5061254b92915061592d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061590057805160ff19168380011785556158b3565b828001600101855582156158b3579182015b828111156158b3578251825591602001919060010190615912565b6119ee91905b8082111561254b576000815560010161593356fe63616e63656c416e64526566756e64466f722861646472657373205f6b65794f776e6572294d6978696e4c6f636b4d616e616765723a2063616c6c657220646f6573206e6f74206861766520746865204c6f636b4d616e6167657220726f6c65416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d617920686176652072657665727465644f4e4c595f4b45595f4d414e414745525f4f525f415050524f564544000000004d6978696e4b65794772616e7465723a2063616c6c657220646f6573206e6f74206861766520746865204b65794772616e746572206f72204c6f636b4d616e6167657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a7231582029ece698ffe2fef421fe726174f661b44b8cf3f3515dc5be0d2846c4b710754564736f6c63430005110032",
  "devdoc": {
    "author": "Julien Genestoux (unlock-protocol.com)",
    "details": "ERC165 allows our contract to be queried to determine whether it implements a given interface. Every ERC-721 compliant contract must implement the ERC165 interface. https://eips.ethereum.org/EIPS/eip-721",
    "methods": {
      "balanceOf(address)": {
        "return": "The number of NFTs owned by `_keyOwner`, either 0 or 1."
      },
      "cancelAndRefund(uint256)": {
        "details": "Destroys the key and sends a refund based on the amount of time remaining.",
        "params": {
          "_tokenId": "The id of the key to cancel."
        }
      },
      "cancelAndRefundFor(address,uint8,bytes32,bytes32,uint256)": {
        "details": "Cancels a key managed by a different user and sends the funds to the msg.sender.",
        "params": {
          "_keyManager": "the key managed by this user will be canceled",
          "_tokenId": "The key to cancel",
          "_v": "_r _s getCancelAndRefundApprovalHash signed by the _keyOwner"
        }
      },
      "disableLock()": {
        "details": "Used to disable lock before migrating keys and/or destroying contract"
      },
      "expireAndRefundFor(address,uint256)": {
        "details": "Invoked by the lock owner to destroy the user's ket and perform a refund and cancellation of the key"
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_tokenId": "The NFT to find the approved address for"
        },
        "return": "The approved address for this NFT, or the zero address if there is none"
      },
      "getCancelAndRefundApprovalHash(address,address)": {
        "details": "this can be computed in JS instead of read from the contract.",
        "params": {
          "_keyManager": "The key manager's address (also the message signer)",
          "_txSender": "The address cancelling cancel on behalf of the keyOwner"
        },
        "return": "approvalHash The hash to sign"
      },
      "getCancelAndRefundValueFor(address)": {
        "details": "Determines how much of a refund a key owner would receive if they issued a cancelAndRefund block.timestamp. Note that due to the time required to mine a tx, the actual refund amount will be lower than what the user reads from this call."
      },
      "getOwnersByPage(uint256,uint256)": {
        "params": {
          "_page": "the page of key owners requested when faceted by page size",
          "_pageSize": "the number of Key Owners requested per page"
        }
      },
      "getTokenIdFor(address)": {
        "return": "The tokenId of the NFT, else returns 0"
      },
      "getTransferFee(address,uint256)": {
        "params": {
          "_keyOwner": "The owner of the key check the transfer fee for."
        }
      },
      "invalidateOffchainApproval(uint256)": {
        "details": "This can be used to invalidate a previously signed message."
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given keyManager",
        "params": {
          "_operator": "operator address which you want to query the approval of",
          "_owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "keyExpirationTimestampFor(address)": {
        "details": "Returns the key's ExpirationTimestamp field for a given owner.Returns 0 if the owner has never owned a key for this lock",
        "params": {
          "_keyOwner": "address of the user for whom we search the key"
        }
      },
      "purchase(uint256,address,address,bytes)": {
        "details": "Purchase functionSetting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more than keyPrice is approved for spending).",
        "params": {
          "_data": "arbitrary data populated by the front-end which initiated the sale",
          "_recipient": "address of the recipient of the purchased key",
          "_referrer": "address of the user making the referral",
          "_value": "the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount (_value is ignored when using ETH)"
        }
      },
      "purchasePriceFor(address,address,bytes)": {
        "details": "minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "This works identically to the other function with an extra data parameter, except this function just sets data to ''",
        "params": {
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "_approved": "representing the status of the approval to be set",
          "_to": "operator address to set the approval"
        }
      },
      "setKeyManagerOf(uint256,address)": {
        "params": {
          "_keyManager": "The address with the manager's rights for the given key. Setting _keyManager to address(0) means the keyOwner is also the keyManager",
          "_tokenId": "The id of the key to assign rights for"
        }
      },
      "shareKey(address,uint256,uint256)": {
        "params": {
          "_timeShared": "The amount of time shared",
          "_to": "The recipient of the shared key",
          "_tokenId": "the key to share"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token name"
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `_index` >= `totalSupply()`.",
        "params": {
          "_index": "A counter less than `totalSupply()`"
        },
        "return": "The token identifier for the `_index`th NFT,  (sort order not specified)"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `_index` >= `balanceOf(_keyOwner)` or if  `_keyOwner` is the zero address, representing invalid NFTs.",
        "params": {
          "_index": "A counter less than `balanceOf(_keyOwner)`",
          "_keyOwner": "An address where we are interested in NFTs owned by them"
        },
        "return": "The token identifier for the `_index`th NFT assigned to `_keyOwner`,   (sort order not specified)"
      },
      "tokenURI(uint256)": {
        "details": "URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the \"ERC721 Metadata JSON Schema\". https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "params": {
          "_tokenId": "The iD of the token  for which we want to retrieve the URI. If 0 is passed here, we just return the appropriate baseTokenURI. If a custom URI has been set we don't return the lock address. It may be included in the custom baseTokenURI if needed."
        }
      },
      "transfer(address,uint256)": {
        "details": "The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.",
        "params": {
          "_value": "sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase)."
        }
      },
      "withdraw(address,uint256)": {
        "details": "Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.",
        "params": {
          "_amount": "specifies the max amount to withdraw, which may be reduced when considering the available balance. Set to 0 or MAX_UINT to withdraw everything.   * TODO: consider allowing anybody to trigger this as long as it goes to owner anyway? -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.",
          "_tokenAddress": "specifies the token address to withdraw or 0 for ETH. This is usually the same as `tokenAddress` in MixinFunds."
        }
      }
    },
    "title": "The Lock contract"
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "This approves _approved to get ownership of _tokenId. Note: that since this is used for both purchase and transfer approvals the approved token may not exist."
      },
      "approveBeneficiary(address,uint256)": {
        "notice": "An ERC-20 style approval, allowing the spender to transfer funds directly from this lock."
      },
      "balanceOf(address)": {
        "notice": "In the specific case of a Lock, each owner can own only at most 1 key."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved address for a single NFT"
      },
      "getBalance(address,address)": {
        "notice": "Gets the current balance of the account provided."
      },
      "getCancelAndRefundApprovalHash(address,address)": {
        "notice": "returns the hash to sign in order to allow another user to cancel on your behalf."
      },
      "getHasValidKey(address)": {
        "notice": "Checks if the user has a non-expired key."
      },
      "getOwnersByPage(uint256,uint256)": {
        "notice": "A function which returns a subset of the keys for this Lock as an array"
      },
      "getTokenIdFor(address)": {
        "notice": "Find the tokenId for a given user"
      },
      "getTransferFee(address,uint256)": {
        "notice": "Determines how much of a fee a key owner would need to pay in order to transfer the key to another account.  This is pro-rated so the fee goes down overtime."
      },
      "grantKeys(address[],uint256[],address[])": {
        "notice": "Allows the Lock owner to give a collection of users a key with no charge. Each key may be assigned a different expiration date."
      },
      "invalidateOffchainApproval(uint256)": {
        "notice": "Sets the minimum nonce for a valid off-chain approval message from the senders account."
      },
      "isKeyOwner(uint256,address)": {
        "notice": "Checks if the given address owns the given tokenId."
      },
      "numberOfOwners()": {
        "notice": "Public function which returns the total number of unique owners (both expired and valid).  This may be larger than totalSupply."
      },
      "purchasePriceFor(address,address,bytes)": {
        "notice": "returns the minimum price paid for a purchase with these params."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfers the ownership of an NFT from one address to another address"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers the ownership of an NFT from one address to another address. When transfer is complete, this functions checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`."
      },
      "setBaseTokenURI(string)": {
        "notice": "Allows the Lock owner to update the baseTokenURI for this Lock."
      },
      "setEventHooks(address,address)": {
        "notice": "Allows a lock manager to add or remove an event hook"
      },
      "setKeyManagerOf(uint256,address)": {
        "notice": "Public function for updating transfer and cancel rights for a given key"
      },
      "shareKey(address,uint256,uint256)": {
        "notice": "Allows the key owner to safely share their key (parent key) by transferring a portion of the remaining time to a new key (child key)."
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid NFTs"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate NFTs assigned to an owner"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "transfer(address,uint256)": {
        "notice": "An ERC-20 style transfer."
      },
      "updateBeneficiary(address)": {
        "notice": "A function which lets the owner of the lock update the beneficiary account, which receives funds on withdrawal."
      },
      "updateKeyPricing(uint256,address)": {
        "notice": "A function which lets the owner of the lock change the pricing for future purchases. This consists of 2 parts: The token address and the price in the given token. In order to set the token to ETH, use 0 for the token Address."
      },
      "updateLockName(string)": {
        "notice": "Allows the Lock owner to assign a descriptive name for this Lock."
      },
      "updateLockSymbol(string)": {
        "notice": "Allows the Lock owner to assign a Symbol for this Lock."
      },
      "updateRefundPenalty(uint256,uint256)": {
        "notice": "Allow the owner to change the refund penalty."
      },
      "updateTransferFee(uint256)": {
        "notice": "Allow the Lock owner to change the transfer fee."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2095,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2097,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2159,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 452,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 497,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "______gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5493,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "lockManagers",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(Role)36_storage"
      },
      {
        "astId": 4282,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "keyGranters",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(Role)36_storage"
      },
      {
        "astId": 6471,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "keyManagerToNonce",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4036,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 3927,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "isAlive",
        "offset": 20,
        "slot": "105",
        "type": "t_bool"
      },
      {
        "astId": 5152,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "unlockProtocol",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IUnlock)3874"
      },
      {
        "astId": 5154,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "expirationDuration",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 5156,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "keyPrice",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5158,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "maxNumberOfKeys",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5160,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 5162,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "beneficiary",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 5167,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "onKeyPurchaseHook",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(ILockKeyPurchaseHook)3917"
      },
      {
        "astId": 5169,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "onKeyCancelHook",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(ILockKeyCancelHook)3886"
      },
      {
        "astId": 4403,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "keyByOwner",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_struct(Key)4381_storage)"
      },
      {
        "astId": 4407,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4410,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "owners",
        "offset": 0,
        "slot": "116",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4414,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "keyManagerOf",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4418,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "approved",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4424,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "managerToOperatorApproved",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5600,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "name",
        "offset": 0,
        "slot": "120",
        "type": "t_string_storage"
      },
      {
        "astId": 5602,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "lockSymbol",
        "offset": 0,
        "slot": "121",
        "type": "t_string_storage"
      },
      {
        "astId": 5604,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "122",
        "type": "t_string_storage"
      },
      {
        "astId": 6575,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "transferFeeBasisPoints",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 6142,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "refundPenaltyBasisPoints",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      },
      {
        "astId": 6144,
        "contract": "contracts/PublicLock.sol:PublicLock",
        "label": "freeTrialLength",
        "offset": 0,
        "slot": "125",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ILockKeyCancelHook)3886": {
        "encoding": "inplace",
        "label": "contract ILockKeyCancelHook",
        "numberOfBytes": "20"
      },
      "t_contract(ILockKeyPurchaseHook)3917": {
        "encoding": "inplace",
        "label": "contract ILockKeyPurchaseHook",
        "numberOfBytes": "20"
      },
      "t_contract(IUnlock)3874": {
        "encoding": "inplace",
        "label": "contract IUnlock",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Key)4381_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MixinKeys.Key)",
        "numberOfBytes": "32",
        "value": "t_struct(Key)4381_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Key)4381_storage": {
        "encoding": "inplace",
        "label": "struct MixinKeys.Key",
        "members": [
          {
            "astId": 4378,
            "contract": "contracts/PublicLock.sol:PublicLock",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4380,
            "contract": "contracts/PublicLock.sol:PublicLock",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Role)36_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 35,
            "contract": "contracts/PublicLock.sol:PublicLock",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}